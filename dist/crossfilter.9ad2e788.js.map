{"version":3,"sources":["scripts/crossfilter.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["exports","crossfilter","version","crossfilter_identity","d","permute","array","index","i","n","length","copy","Array","bisect","bisect_by","by","f","bisectLeft","a","x","lo","hi","mid","bisectRight","right","left","heap","heap_by","sift","sort","t","child","heapselect","heapselect_by","k","queue","Math","min","insertionsort","insertionsort_by","j","quicksort","quicksort_by","quicksort_sizeThreshold","sixth","i1","i5","i3","i2","i4","e1","x1","e2","x2","e3","x3","e4","x4","e5","x5","pivot1","pivotValue1","pivot2","pivotValue2","less","great","pivotsEqual","ek","xk","greatValue","lessValue","crossfilter_array8","crossfilter_arrayUntyped","crossfilter_array16","crossfilter_array32","crossfilter_arrayLengthen","crossfilter_arrayLengthenUntyped","crossfilter_arrayWiden","crossfilter_arrayWidenUntyped","Uint8Array","Uint16Array","Uint32Array","constructor","set","width","Error","crossfilter_filterExact","value","values","crossfilter_filterRange","range","max","crossfilter_filterAll","crossfilter_null","crossfilter_zero","crossfilter_reduceIncrement","p","crossfilter_reduceDecrement","crossfilter_reduceAdd","v","crossfilter_reduceSubtract","add","remove","removeData","dimension","groupAll","size","data","m","M","filters","filterListeners","dataListeners","removeDataListeners","newData","n0","n1","concat","forEach","l","newIndex","crossfilter_index","removed","push","filter","filterExact","filterRange","filterFunction","filterAll","top","bottom","group","dispose","one","zero","newValues","refilter","refilterFunction","indexListeners","dimensionGroups","lo0","hi0","unshift","preAdd","postAdd","map","crossfilter_range","bounds","lo1","hi1","oldValues","oldIndex","i0","reIndex","filterIndexBounds","filterIndexFunction","added","isArray","key","all","reduce","reduceCount","reduceSum","order","orderNatural","groups","groupIndex","groupWidth","groupCapacity","crossfilter_capacity","select","reduceAdd","reduceRemove","reduceInitial","update","reset","resetNeeded","arguments","oldGroups","initial","k0","g0","x0","g","groupIncrement","indexOf","updateMany","resetMany","updateOne","resetOne","oldK","seenGroups","filterOne","valueOf","splice","reduceValue","w","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","dep","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"crossfilter.9ad2e788.js","sourceRoot":"..","sourcesContent":["(function(exports){\r\n  crossfilter.version = \"1.3.14\";\r\n  function crossfilter_identity(d) {\r\n    return d;\r\n  }\r\n  crossfilter.permute = permute;\r\n  \r\n  function permute(array, index) {\r\n    for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\r\n      copy[i] = array[index[i]];\r\n    }\r\n    return copy;\r\n  }\r\n  var bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\r\n  \r\n  bisect.by = bisect_by;\r\n  \r\n  function bisect_by(f) {\r\n  \r\n    // Locate the insertion point for x in a to maintain sorted order. The\r\n    // arguments lo and hi may be used to specify a subset of the array which\r\n    // should be considered; by default the entire array is used. If x is already\r\n    // present in a, the insertion point will be before (to the left of) any\r\n    // existing entries. The return value is suitable for use as the first\r\n    // argument to `array.splice` assuming that a is already sorted.\r\n    //\r\n    // The returned insertion point i partitions the array a into two halves so\r\n    // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\r\n    // a[i:hi] for the right side.\r\n    function bisectLeft(a, x, lo, hi) {\r\n      while (lo < hi) {\r\n        var mid = lo + hi >>> 1;\r\n        if (f(a[mid]) < x) lo = mid + 1;\r\n        else hi = mid;\r\n      }\r\n      return lo;\r\n    }\r\n  \r\n    // Similar to bisectLeft, but returns an insertion point which comes after (to\r\n    // the right of) any existing entries of x in a.\r\n    //\r\n    // The returned insertion point i partitions the array into two halves so that\r\n    // all v <= x for v in a[lo:i] for the left side and all v > x for v in\r\n    // a[i:hi] for the right side.\r\n    function bisectRight(a, x, lo, hi) {\r\n      while (lo < hi) {\r\n        var mid = lo + hi >>> 1;\r\n        if (x < f(a[mid])) hi = mid;\r\n        else lo = mid + 1;\r\n      }\r\n      return lo;\r\n    }\r\n  \r\n    bisectRight.right = bisectRight;\r\n    bisectRight.left = bisectLeft;\r\n    return bisectRight;\r\n  }\r\n  var heap = crossfilter.heap = heap_by(crossfilter_identity);\r\n  \r\n  heap.by = heap_by;\r\n  \r\n  function heap_by(f) {\r\n  \r\n    // Builds a binary heap within the specified array a[lo:hi]. The heap has the\r\n    // property such that the parent a[lo+i] is always less than or equal to its\r\n    // two children: a[lo+2*i+1] and a[lo+2*i+2].\r\n    function heap(a, lo, hi) {\r\n      var n = hi - lo,\r\n          i = (n >>> 1) + 1;\r\n      while (--i > 0) sift(a, i, n, lo);\r\n      return a;\r\n    }\r\n  \r\n    // Sorts the specified array a[lo:hi] in descending order, assuming it is\r\n    // already a heap.\r\n    function sort(a, lo, hi) {\r\n      var n = hi - lo,\r\n          t;\r\n      while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\r\n      return a;\r\n    }\r\n  \r\n    // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\r\n    // slice of array a[lo:lo+n]. This method can also be used to update the heap\r\n    // incrementally, without incurring the full cost of reconstructing the heap.\r\n    function sift(a, i, n, lo) {\r\n      var d = a[--lo + i],\r\n          x = f(d),\r\n          child;\r\n      while ((child = i << 1) <= n) {\r\n        if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\r\n        if (x <= f(a[lo + child])) break;\r\n        a[lo + i] = a[lo + child];\r\n        i = child;\r\n      }\r\n      a[lo + i] = d;\r\n    }\r\n  \r\n    heap.sort = sort;\r\n    return heap;\r\n  }\r\n  var heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\r\n  \r\n  heapselect.by = heapselect_by;\r\n  \r\n  function heapselect_by(f) {\r\n    var heap = heap_by(f);\r\n  \r\n    // Returns a new array containing the top k elements in the array a[lo:hi].\r\n    // The returned array is not sorted, but maintains the heap property. If k is\r\n    // greater than hi - lo, then fewer than k elements will be returned. The\r\n    // order of elements in a is unchanged by this operation.\r\n    function heapselect(a, lo, hi, k) {\r\n      var queue = new Array(k = Math.min(hi - lo, k)),\r\n          min,\r\n          i,\r\n          x,\r\n          d;\r\n  \r\n      for (i = 0; i < k; ++i) queue[i] = a[lo++];\r\n      heap(queue, 0, k);\r\n  \r\n      if (lo < hi) {\r\n        min = f(queue[0]);\r\n        do {\r\n          if (x = f(d = a[lo]) > min) {\r\n            queue[0] = d;\r\n            min = f(heap(queue, 0, k)[0]);\r\n          }\r\n        } while (++lo < hi);\r\n      }\r\n  \r\n      return queue;\r\n    }\r\n  \r\n    return heapselect;\r\n  }\r\n  var insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\r\n  \r\n  insertionsort.by = insertionsort_by;\r\n  \r\n  function insertionsort_by(f) {\r\n  \r\n    function insertionsort(a, lo, hi) {\r\n      for (var i = lo + 1; i < hi; ++i) {\r\n        for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\r\n          a[j] = a[j - 1];\r\n        }\r\n        a[j] = t;\r\n      }\r\n      return a;\r\n    }\r\n  \r\n    return insertionsort;\r\n  }\r\n  // Algorithm designed by Vladimir Yaroslavskiy.\r\n  // Implementation based on the Dart project; see lib/dart/LICENSE for details.\r\n  \r\n  var quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\r\n  \r\n  quicksort.by = quicksort_by;\r\n  \r\n  function quicksort_by(f) {\r\n    var insertionsort = insertionsort_by(f);\r\n  \r\n    function sort(a, lo, hi) {\r\n      return (hi - lo < quicksort_sizeThreshold\r\n          ? insertionsort\r\n          : quicksort)(a, lo, hi);\r\n    }\r\n  \r\n    function quicksort(a, lo, hi) {\r\n      // Compute the two pivots by looking at 5 elements.\r\n      var sixth = (hi - lo) / 6 | 0,\r\n          i1 = lo + sixth,\r\n          i5 = hi - 1 - sixth,\r\n          i3 = lo + hi - 1 >> 1,  // The midpoint.\r\n          i2 = i3 - sixth,\r\n          i4 = i3 + sixth;\r\n  \r\n      var e1 = a[i1], x1 = f(e1),\r\n          e2 = a[i2], x2 = f(e2),\r\n          e3 = a[i3], x3 = f(e3),\r\n          e4 = a[i4], x4 = f(e4),\r\n          e5 = a[i5], x5 = f(e5);\r\n  \r\n      var t;\r\n  \r\n      // Sort the selected 5 elements using a sorting network.\r\n      if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\r\n      if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\r\n      if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\r\n      if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\r\n      if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\r\n      if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\r\n      if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\r\n      if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\r\n      if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\r\n  \r\n      var pivot1 = e2, pivotValue1 = x2,\r\n          pivot2 = e4, pivotValue2 = x4;\r\n  \r\n      // e2 and e4 have been saved in the pivot variables. They will be written\r\n      // back, once the partitioning is finished.\r\n      a[i1] = e1;\r\n      a[i2] = a[lo];\r\n      a[i3] = e3;\r\n      a[i4] = a[hi - 1];\r\n      a[i5] = e5;\r\n  \r\n      var less = lo + 1,   // First element in the middle partition.\r\n          great = hi - 2;  // Last element in the middle partition.\r\n  \r\n      // Note that for value comparison, <, <=, >= and > coerce to a primitive via\r\n      // Object.prototype.valueOf; == and === do not, so in order to be consistent\r\n      // with natural order (such as for Date objects), we must do two compares.\r\n      var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\r\n      if (pivotsEqual) {\r\n  \r\n        // Degenerated case where the partitioning becomes a dutch national flag\r\n        // problem.\r\n        //\r\n        // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\r\n        //  ^             ^          ^             ^            ^\r\n        // left         less         k           great         right\r\n        //\r\n        // a[left] and a[right] are undefined and are filled after the\r\n        // partitioning.\r\n        //\r\n        // Invariants:\r\n        //   1) for x in ]left, less[ : x < pivot.\r\n        //   2) for x in [less, k[ : x == pivot.\r\n        //   3) for x in ]great, right[ : x > pivot.\r\n        for (var k = less; k <= great; ++k) {\r\n          var ek = a[k], xk = f(ek);\r\n          if (xk < pivotValue1) {\r\n            if (k !== less) {\r\n              a[k] = a[less];\r\n              a[less] = ek;\r\n            }\r\n            ++less;\r\n          } else if (xk > pivotValue1) {\r\n  \r\n            // Find the first element <= pivot in the range [k - 1, great] and\r\n            // put [:ek:] there. We know that such an element must exist:\r\n            // When k == less, then el3 (which is equal to pivot) lies in the\r\n            // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\r\n            // Note that in the latter case invariant 2 will be violated for a\r\n            // short amount of time. The invariant will be restored when the\r\n            // pivots are put into their final positions.\r\n            while (true) {\r\n              var greatValue = f(a[great]);\r\n              if (greatValue > pivotValue1) {\r\n                great--;\r\n                // This is the only location in the while-loop where a new\r\n                // iteration is started.\r\n                continue;\r\n              } else if (greatValue < pivotValue1) {\r\n                // Triple exchange.\r\n                a[k] = a[less];\r\n                a[less++] = a[great];\r\n                a[great--] = ek;\r\n                break;\r\n              } else {\r\n                a[k] = a[great];\r\n                a[great--] = ek;\r\n                // Note: if great < k then we will exit the outer loop and fix\r\n                // invariant 2 (which we just violated).\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n  \r\n        // We partition the list into three parts:\r\n        //  1. < pivot1\r\n        //  2. >= pivot1 && <= pivot2\r\n        //  3. > pivot2\r\n        //\r\n        // During the loop we have:\r\n        // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\r\n        //  ^            ^                        ^              ^             ^\r\n        // left         less                     k              great        right\r\n        //\r\n        // a[left] and a[right] are undefined and are filled after the\r\n        // partitioning.\r\n        //\r\n        // Invariants:\r\n        //   1. for x in ]left, less[ : x < pivot1\r\n        //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\r\n        //   3. for x in ]great, right[ : x > pivot2\r\n        for (var k = less; k <= great; k++) {\r\n          var ek = a[k], xk = f(ek);\r\n          if (xk < pivotValue1) {\r\n            if (k !== less) {\r\n              a[k] = a[less];\r\n              a[less] = ek;\r\n            }\r\n            ++less;\r\n          } else {\r\n            if (xk > pivotValue2) {\r\n              while (true) {\r\n                var greatValue = f(a[great]);\r\n                if (greatValue > pivotValue2) {\r\n                  great--;\r\n                  if (great < k) break;\r\n                  // This is the only location inside the loop where a new\r\n                  // iteration is started.\r\n                  continue;\r\n                } else {\r\n                  // a[great] <= pivot2.\r\n                  if (greatValue < pivotValue1) {\r\n                    // Triple exchange.\r\n                    a[k] = a[less];\r\n                    a[less++] = a[great];\r\n                    a[great--] = ek;\r\n                  } else {\r\n                    // a[great] >= pivot1.\r\n                    a[k] = a[great];\r\n                    a[great--] = ek;\r\n                  }\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      // Move pivots into their final positions.\r\n      // We shrunk the list from both sides (a[left] and a[right] have\r\n      // meaningless values in them) and now we move elements from the first\r\n      // and third partition into these locations so that we can store the\r\n      // pivots.\r\n      a[lo] = a[less - 1];\r\n      a[less - 1] = pivot1;\r\n      a[hi - 1] = a[great + 1];\r\n      a[great + 1] = pivot2;\r\n  \r\n      // The list is now partitioned into three partitions:\r\n      // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\r\n      //  ^            ^                        ^             ^\r\n      // left         less                     great        right\r\n  \r\n      // Recursive descent. (Don't include the pivot values.)\r\n      sort(a, lo, less - 1);\r\n      sort(a, great + 2, hi);\r\n  \r\n      if (pivotsEqual) {\r\n        // All elements in the second partition are equal to the pivot. No\r\n        // need to sort them.\r\n        return a;\r\n      }\r\n  \r\n      // In theory it should be enough to call _doSort recursively on the second\r\n      // partition.\r\n      // The Android source however removes the pivot elements from the recursive\r\n      // call if the second partition is too large (more than 2/3 of the list).\r\n      if (less < i1 && great > i5) {\r\n        var lessValue, greatValue;\r\n        while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\r\n        while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\r\n  \r\n        // Copy paste of the previous 3-way partitioning with adaptions.\r\n        //\r\n        // We partition the list into three parts:\r\n        //  1. == pivot1\r\n        //  2. > pivot1 && < pivot2\r\n        //  3. == pivot2\r\n        //\r\n        // During the loop we have:\r\n        // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\r\n        //              ^                      ^              ^\r\n        //            less                     k              great\r\n        //\r\n        // Invariants:\r\n        //   1. for x in [ *, less[ : x == pivot1\r\n        //   2. for x in [less, k[ : pivot1 < x && x < pivot2\r\n        //   3. for x in ]great, * ] : x == pivot2\r\n        for (var k = less; k <= great; k++) {\r\n          var ek = a[k], xk = f(ek);\r\n          if (xk <= pivotValue1 && xk >= pivotValue1) {\r\n            if (k !== less) {\r\n              a[k] = a[less];\r\n              a[less] = ek;\r\n            }\r\n            less++;\r\n          } else {\r\n            if (xk <= pivotValue2 && xk >= pivotValue2) {\r\n              while (true) {\r\n                var greatValue = f(a[great]);\r\n                if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\r\n                  great--;\r\n                  if (great < k) break;\r\n                  // This is the only location inside the loop where a new\r\n                  // iteration is started.\r\n                  continue;\r\n                } else {\r\n                  // a[great] < pivot2.\r\n                  if (greatValue < pivotValue1) {\r\n                    // Triple exchange.\r\n                    a[k] = a[less];\r\n                    a[less++] = a[great];\r\n                    a[great--] = ek;\r\n                  } else {\r\n                    // a[great] == pivot1.\r\n                    a[k] = a[great];\r\n                    a[great--] = ek;\r\n                  }\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      // The second partition has now been cleared of pivot elements and looks\r\n      // as follows:\r\n      // [  *  |  > pivot1 && < pivot2  | * ]\r\n      //        ^                      ^\r\n      //       less                  great\r\n      // Sort the second partition using recursive descent.\r\n  \r\n      // The second partition looks as follows:\r\n      // [  *  |  >= pivot1 && <= pivot2  | * ]\r\n      //        ^                        ^\r\n      //       less                    great\r\n      // Simply sort it by recursive descent.\r\n  \r\n      return sort(a, less, great + 1);\r\n    }\r\n  \r\n    return sort;\r\n  }\r\n  \r\n  var quicksort_sizeThreshold = 32;\r\n  var crossfilter_array8 = crossfilter_arrayUntyped,\r\n      crossfilter_array16 = crossfilter_arrayUntyped,\r\n      crossfilter_array32 = crossfilter_arrayUntyped,\r\n      crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\r\n      crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\r\n  \r\n  if (typeof Uint8Array !== \"undefined\") {\r\n    crossfilter_array8 = function(n) { return new Uint8Array(n); };\r\n    crossfilter_array16 = function(n) { return new Uint16Array(n); };\r\n    crossfilter_array32 = function(n) { return new Uint32Array(n); };\r\n  \r\n    crossfilter_arrayLengthen = function(array, length) {\r\n      if (array.length >= length) return array;\r\n      var copy = new array.constructor(length);\r\n      copy.set(array);\r\n      return copy;\r\n    };\r\n  \r\n    crossfilter_arrayWiden = function(array, width) {\r\n      var copy;\r\n      switch (width) {\r\n        case 16: copy = crossfilter_array16(array.length); break;\r\n        case 32: copy = crossfilter_array32(array.length); break;\r\n        default: throw new Error(\"invalid array width!\");\r\n      }\r\n      copy.set(array);\r\n      return copy;\r\n    };\r\n  }\r\n  \r\n  function crossfilter_arrayUntyped(n) {\r\n    var array = new Array(n), i = -1;\r\n    while (++i < n) array[i] = 0;\r\n    return array;\r\n  }\r\n  \r\n  function crossfilter_arrayLengthenUntyped(array, length) {\r\n    var n = array.length;\r\n    while (n < length) array[n++] = 0;\r\n    return array;\r\n  }\r\n  \r\n  function crossfilter_arrayWidenUntyped(array, width) {\r\n    if (width > 32) throw new Error(\"invalid array width!\");\r\n    return array;\r\n  }\r\n  function crossfilter_filterExact(bisect, value) {\r\n    return function(values) {\r\n      var n = values.length;\r\n      return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\r\n    };\r\n  }\r\n  \r\n  function crossfilter_filterRange(bisect, range) {\r\n    var min = range[0],\r\n        max = range[1];\r\n    return function(values) {\r\n      var n = values.length;\r\n      return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\r\n    };\r\n  }\r\n  \r\n  function crossfilter_filterAll(values) {\r\n    return [0, values.length];\r\n  }\r\n  function crossfilter_null() {\r\n    return null;\r\n  }\r\n  function crossfilter_zero() {\r\n    return 0;\r\n  }\r\n  function crossfilter_reduceIncrement(p) {\r\n    return p + 1;\r\n  }\r\n  \r\n  function crossfilter_reduceDecrement(p) {\r\n    return p - 1;\r\n  }\r\n  \r\n  function crossfilter_reduceAdd(f) {\r\n    return function(p, v) {\r\n      return p + +f(v);\r\n    };\r\n  }\r\n  \r\n  function crossfilter_reduceSubtract(f) {\r\n    return function(p, v) {\r\n      return p - f(v);\r\n    };\r\n  }\r\n  exports.crossfilter = crossfilter;\r\n  \r\n  function crossfilter() {\r\n    var crossfilter = {\r\n      add: add,\r\n      remove: removeData,\r\n      dimension: dimension,\r\n      groupAll: groupAll,\r\n      size: size\r\n    };\r\n  \r\n    var data = [], // the records\r\n        n = 0, // the number of records; data.length\r\n        m = 0, // a bit mask representing which dimensions are in use\r\n        M = 8, // number of dimensions that can fit in `filters`\r\n        filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\r\n        filterListeners = [], // when the filters change\r\n        dataListeners = [], // when data is added\r\n        removeDataListeners = []; // when data is removed\r\n  \r\n    // Adds the specified new records to this crossfilter.\r\n    function add(newData) {\r\n      var n0 = n,\r\n          n1 = newData.length;\r\n  \r\n      // If there's actually new data to add…\r\n      // Merge the new data into the existing data.\r\n      // Lengthen the filter bitset to handle the new records.\r\n      // Notify listeners (dimensions and groups) that new data is available.\r\n      if (n1) {\r\n        data = data.concat(newData);\r\n        filters = crossfilter_arrayLengthen(filters, n += n1);\r\n        dataListeners.forEach(function(l) { l(newData, n0, n1); });\r\n      }\r\n  \r\n      return crossfilter;\r\n    }\r\n  \r\n    // Removes all records that match the current filters.\r\n    function removeData() {\r\n      var newIndex = crossfilter_index(n, n),\r\n          removed = [];\r\n      for (var i = 0, j = 0; i < n; ++i) {\r\n        if (filters[i]) newIndex[i] = j++;\r\n        else removed.push(i);\r\n      }\r\n  \r\n      // Remove all matching records from groups.\r\n      filterListeners.forEach(function(l) { l(0, [], removed); });\r\n  \r\n      // Update indexes.\r\n      removeDataListeners.forEach(function(l) { l(newIndex); });\r\n  \r\n      // Remove old filters and data by overwriting.\r\n      for (var i = 0, j = 0, k; i < n; ++i) {\r\n        if (k = filters[i]) {\r\n          if (i !== j) filters[j] = k, data[j] = data[i];\r\n          ++j;\r\n        }\r\n      }\r\n      data.length = j;\r\n      while (n > j) filters[--n] = 0;\r\n    }\r\n  \r\n    // Adds a new dimension with the specified value accessor function.\r\n    function dimension(value) {\r\n      var dimension = {\r\n        filter: filter,\r\n        filterExact: filterExact,\r\n        filterRange: filterRange,\r\n        filterFunction: filterFunction,\r\n        filterAll: filterAll,\r\n        top: top,\r\n        bottom: bottom,\r\n        group: group,\r\n        groupAll: groupAll,\r\n        dispose: dispose,\r\n        remove: dispose // for backwards-compatibility\r\n      };\r\n  \r\n      var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\r\n          zero = ~one, // inverted one, e.g., 11110111\r\n          values, // sorted, cached array\r\n          index, // value rank ↦ object id\r\n          newValues, // temporary array storing newly-added values\r\n          newIndex, // temporary array storing newly-added index\r\n          sort = quicksort_by(function(i) { return newValues[i]; }),\r\n          refilter = crossfilter_filterAll, // for recomputing filter\r\n          refilterFunction, // the custom filter function in use\r\n          indexListeners = [], // when data is added\r\n          dimensionGroups = [],\r\n          lo0 = 0,\r\n          hi0 = 0;\r\n  \r\n      // Updating a dimension is a two-stage process. First, we must update the\r\n      // associated filters for the newly-added records. Once all dimensions have\r\n      // updated their filters, the groups are notified to update.\r\n      dataListeners.unshift(preAdd);\r\n      dataListeners.push(postAdd);\r\n  \r\n      removeDataListeners.push(removeData);\r\n  \r\n      // Incorporate any existing data into this dimension, and make sure that the\r\n      // filter bitset is wide enough to handle the new dimension.\r\n      m |= one;\r\n      if (M >= 32 ? !one : m & -(1 << M)) {\r\n        filters = crossfilter_arrayWiden(filters, M <<= 1);\r\n      }\r\n      preAdd(data, 0, n);\r\n      postAdd(data, 0, n);\r\n  \r\n      // Incorporates the specified new records into this dimension.\r\n      // This function is responsible for updating filters, values, and index.\r\n      function preAdd(newData, n0, n1) {\r\n  \r\n        // Permute new values into natural order using a sorted index.\r\n        newValues = newData.map(value);\r\n        newIndex = sort(crossfilter_range(n1), 0, n1);\r\n        newValues = permute(newValues, newIndex);\r\n  \r\n        // Bisect newValues to determine which new records are selected.\r\n        var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\r\n        if (refilterFunction) {\r\n          for (i = 0; i < n1; ++i) {\r\n            if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\r\n          }\r\n        } else {\r\n          for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\r\n          for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\r\n        }\r\n  \r\n        // If this dimension previously had no data, then we don't need to do the\r\n        // more expensive merge operation; use the new values and index as-is.\r\n        if (!n0) {\r\n          values = newValues;\r\n          index = newIndex;\r\n          lo0 = lo1;\r\n          hi0 = hi1;\r\n          return;\r\n        }\r\n  \r\n        var oldValues = values,\r\n            oldIndex = index,\r\n            i0 = 0,\r\n            i1 = 0;\r\n  \r\n        // Otherwise, create new arrays into which to merge new and old.\r\n        values = new Array(n);\r\n        index = crossfilter_index(n, n);\r\n  \r\n        // Merge the old and new sorted values, and old and new index.\r\n        for (i = 0; i0 < n0 && i1 < n1; ++i) {\r\n          if (oldValues[i0] < newValues[i1]) {\r\n            values[i] = oldValues[i0];\r\n            index[i] = oldIndex[i0++];\r\n          } else {\r\n            values[i] = newValues[i1];\r\n            index[i] = newIndex[i1++] + n0;\r\n          }\r\n        }\r\n  \r\n        // Add any remaining old values.\r\n        for (; i0 < n0; ++i0, ++i) {\r\n          values[i] = oldValues[i0];\r\n          index[i] = oldIndex[i0];\r\n        }\r\n  \r\n        // Add any remaining new values.\r\n        for (; i1 < n1; ++i1, ++i) {\r\n          values[i] = newValues[i1];\r\n          index[i] = newIndex[i1] + n0;\r\n        }\r\n  \r\n        // Bisect again to recompute lo0 and hi0.\r\n        bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\r\n      }\r\n  \r\n      // When all filters have updated, notify index listeners of the new values.\r\n      function postAdd(newData, n0, n1) {\r\n        indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\r\n        newValues = newIndex = null;\r\n      }\r\n  \r\n      function removeData(reIndex) {\r\n        for (var i = 0, j = 0, k; i < n; ++i) {\r\n          if (filters[k = index[i]]) {\r\n            if (i !== j) values[j] = values[i];\r\n            index[j] = reIndex[k];\r\n            ++j;\r\n          }\r\n        }\r\n        values.length = j;\r\n        while (j < n) index[j++] = 0;\r\n  \r\n        // Bisect again to recompute lo0 and hi0.\r\n        var bounds = refilter(values);\r\n        lo0 = bounds[0], hi0 = bounds[1];\r\n      }\r\n  \r\n      // Updates the selected values based on the specified bounds [lo, hi].\r\n      // This implementation is used by all the public filter methods.\r\n      function filterIndexBounds(bounds) {\r\n        var lo1 = bounds[0],\r\n            hi1 = bounds[1];\r\n  \r\n        if (refilterFunction) {\r\n          refilterFunction = null;\r\n          filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\r\n          lo0 = lo1;\r\n          hi0 = hi1;\r\n          return dimension;\r\n        }\r\n  \r\n        var i,\r\n            j,\r\n            k,\r\n            added = [],\r\n            removed = [];\r\n  \r\n        // Fast incremental update based on previous lo index.\r\n        if (lo1 < lo0) {\r\n          for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\r\n            filters[k = index[i]] ^= one;\r\n            added.push(k);\r\n          }\r\n        } else if (lo1 > lo0) {\r\n          for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\r\n            filters[k = index[i]] ^= one;\r\n            removed.push(k);\r\n          }\r\n        }\r\n  \r\n        // Fast incremental update based on previous hi index.\r\n        if (hi1 > hi0) {\r\n          for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\r\n            filters[k = index[i]] ^= one;\r\n            added.push(k);\r\n          }\r\n        } else if (hi1 < hi0) {\r\n          for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\r\n            filters[k = index[i]] ^= one;\r\n            removed.push(k);\r\n          }\r\n        }\r\n  \r\n        lo0 = lo1;\r\n        hi0 = hi1;\r\n        filterListeners.forEach(function(l) { l(one, added, removed); });\r\n        return dimension;\r\n      }\r\n  \r\n      // Filters this dimension using the specified range, value, or null.\r\n      // If the range is null, this is equivalent to filterAll.\r\n      // If the range is an array, this is equivalent to filterRange.\r\n      // Otherwise, this is equivalent to filterExact.\r\n      function filter(range) {\r\n        return range == null\r\n            ? filterAll() : Array.isArray(range)\r\n            ? filterRange(range) : typeof range === \"function\"\r\n            ? filterFunction(range)\r\n            : filterExact(range);\r\n      }\r\n  \r\n      // Filters this dimension to select the exact value.\r\n      function filterExact(value) {\r\n        return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\r\n      }\r\n  \r\n      // Filters this dimension to select the specified range [lo, hi].\r\n      // The lower bound is inclusive, and the upper bound is exclusive.\r\n      function filterRange(range) {\r\n        return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\r\n      }\r\n  \r\n      // Clears any filters on this dimension.\r\n      function filterAll() {\r\n        return filterIndexBounds((refilter = crossfilter_filterAll)(values));\r\n      }\r\n  \r\n      // Filters this dimension using an arbitrary function.\r\n      function filterFunction(f) {\r\n        refilter = crossfilter_filterAll;\r\n  \r\n        filterIndexFunction(refilterFunction = f);\r\n  \r\n        lo0 = 0;\r\n        hi0 = n;\r\n  \r\n        return dimension;\r\n      }\r\n  \r\n      function filterIndexFunction(f) {\r\n        var i,\r\n            k,\r\n            x,\r\n            added = [],\r\n            removed = [];\r\n  \r\n        for (i = 0; i < n; ++i) {\r\n          if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\r\n            if (x) filters[k] &= zero, added.push(k);\r\n            else filters[k] |= one, removed.push(k);\r\n          }\r\n        }\r\n        filterListeners.forEach(function(l) { l(one, added, removed); });\r\n      }\r\n  \r\n      // Returns the top K selected records based on this dimension's order.\r\n      // Note: observes this dimension's filter, unlike group and groupAll.\r\n      function top(k) {\r\n        var array = [],\r\n            i = hi0,\r\n            j;\r\n  \r\n        while (--i >= lo0 && k > 0) {\r\n          if (!filters[j = index[i]]) {\r\n            array.push(data[j]);\r\n            --k;\r\n          }\r\n        }\r\n  \r\n        return array;\r\n      }\r\n  \r\n      // Returns the bottom K selected records based on this dimension's order.\r\n      // Note: observes this dimension's filter, unlike group and groupAll.\r\n      function bottom(k) {\r\n        var array = [],\r\n            i = lo0,\r\n            j;\r\n  \r\n        while (i < hi0 && k > 0) {\r\n          if (!filters[j = index[i]]) {\r\n            array.push(data[j]);\r\n            --k;\r\n          }\r\n          i++;\r\n        }\r\n  \r\n        return array;\r\n      }\r\n  \r\n      // Adds a new group to this dimension, using the specified key function.\r\n      function group(key) {\r\n        var group = {\r\n          top: top,\r\n          all: all,\r\n          reduce: reduce,\r\n          reduceCount: reduceCount,\r\n          reduceSum: reduceSum,\r\n          order: order,\r\n          orderNatural: orderNatural,\r\n          size: size,\r\n          dispose: dispose,\r\n          remove: dispose // for backwards-compatibility\r\n        };\r\n  \r\n        // Ensure that this group will be removed when the dimension is removed.\r\n        dimensionGroups.push(group);\r\n  \r\n        var groups, // array of {key, value}\r\n            groupIndex, // object id ↦ group id\r\n            groupWidth = 8,\r\n            groupCapacity = crossfilter_capacity(groupWidth),\r\n            k = 0, // cardinality\r\n            select,\r\n            heap,\r\n            reduceAdd,\r\n            reduceRemove,\r\n            reduceInitial,\r\n            update = crossfilter_null,\r\n            reset = crossfilter_null,\r\n            resetNeeded = true,\r\n            groupAll = key === crossfilter_null;\r\n  \r\n        if (arguments.length < 1) key = crossfilter_identity;\r\n  \r\n        // The group listens to the crossfilter for when any dimension changes, so\r\n        // that it can update the associated reduce values. It must also listen to\r\n        // the parent dimension for when data is added, and compute new keys.\r\n        filterListeners.push(update);\r\n        indexListeners.push(add);\r\n        removeDataListeners.push(removeData);\r\n  \r\n        // Incorporate any existing data into the grouping.\r\n        add(values, index, 0, n);\r\n  \r\n        // Incorporates the specified new values into this group.\r\n        // This function is responsible for updating groups and groupIndex.\r\n        function add(newValues, newIndex, n0, n1) {\r\n          var oldGroups = groups,\r\n              reIndex = crossfilter_index(k, groupCapacity),\r\n              add = reduceAdd,\r\n              initial = reduceInitial,\r\n              k0 = k, // old cardinality\r\n              i0 = 0, // index of old group\r\n              i1 = 0, // index of new record\r\n              j, // object id\r\n              g0, // old group\r\n              x0, // old key\r\n              x1, // new key\r\n              g, // group to add\r\n              x; // key of group to add\r\n  \r\n          // If a reset is needed, we don't need to update the reduce values.\r\n          if (resetNeeded) add = initial = crossfilter_null;\r\n  \r\n          // Reset the new groups (k is a lower bound).\r\n          // Also, make sure that groupIndex exists and is long enough.\r\n          groups = new Array(k), k = 0;\r\n          groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\r\n  \r\n          // Get the first old key (x0 of g0), if it exists.\r\n          if (k0) x0 = (g0 = oldGroups[0]).key;\r\n  \r\n          // Find the first new key (x1), skipping NaN keys.\r\n          while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\r\n  \r\n          // While new keys remain…\r\n          while (i1 < n1) {\r\n  \r\n            // Determine the lesser of the two current keys; new and old.\r\n            // If there are no old keys remaining, then always add the new key.\r\n            if (g0 && x0 <= x1) {\r\n              g = g0, x = x0;\r\n  \r\n              // Record the new index of the old group.\r\n              reIndex[i0] = k;\r\n  \r\n              // Retrieve the next old key.\r\n              if (g0 = oldGroups[++i0]) x0 = g0.key;\r\n            } else {\r\n              g = {key: x1, value: initial()}, x = x1;\r\n            }\r\n  \r\n            // Add the lesser group.\r\n            groups[k] = g;\r\n  \r\n            // Add any selected records belonging to the added group, while\r\n            // advancing the new key and populating the associated group index.\r\n            while (!(x1 > x)) {\r\n              groupIndex[j = newIndex[i1] + n0] = k;\r\n              if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\r\n              if (++i1 >= n1) break;\r\n              x1 = key(newValues[i1]);\r\n            }\r\n  \r\n            groupIncrement();\r\n          }\r\n  \r\n          // Add any remaining old groups that were greater than all new keys.\r\n          // No incremental reduce is needed; these groups have no new records.\r\n          // Also record the new index of the old group.\r\n          while (i0 < k0) {\r\n            groups[reIndex[i0] = k] = oldGroups[i0++];\r\n            groupIncrement();\r\n          }\r\n  \r\n          // If we added any new groups before any old groups,\r\n          // update the group index of all the old records.\r\n          if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\r\n            groupIndex[i0] = reIndex[groupIndex[i0]];\r\n          }\r\n  \r\n          // Modify the update and reset behavior based on the cardinality.\r\n          // If the cardinality is less than or equal to one, then the groupIndex\r\n          // is not needed. If the cardinality is zero, then there are no records\r\n          // and therefore no groups to update or reset. Note that we also must\r\n          // change the registered listener to point to the new method.\r\n          j = filterListeners.indexOf(update);\r\n          if (k > 1) {\r\n            update = updateMany;\r\n            reset = resetMany;\r\n          } else {\r\n            if (!k && groupAll) {\r\n              k = 1;\r\n              groups = [{key: null, value: initial()}];\r\n            }\r\n            if (k === 1) {\r\n              update = updateOne;\r\n              reset = resetOne;\r\n            } else {\r\n              update = crossfilter_null;\r\n              reset = crossfilter_null;\r\n            }\r\n            groupIndex = null;\r\n          }\r\n          filterListeners[j] = update;\r\n  \r\n          // Count the number of added groups,\r\n          // and widen the group index as needed.\r\n          function groupIncrement() {\r\n            if (++k === groupCapacity) {\r\n              reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\r\n              groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\r\n              groupCapacity = crossfilter_capacity(groupWidth);\r\n            }\r\n          }\r\n        }\r\n  \r\n        function removeData() {\r\n          if (k > 1) {\r\n            var oldK = k,\r\n                oldGroups = groups,\r\n                seenGroups = crossfilter_index(oldK, oldK);\r\n  \r\n            // Filter out non-matches by copying matching group index entries to\r\n            // the beginning of the array.\r\n            for (var i = 0, j = 0; i < n; ++i) {\r\n              if (filters[i]) {\r\n                seenGroups[groupIndex[j] = groupIndex[i]] = 1;\r\n                ++j;\r\n              }\r\n            }\r\n  \r\n            // Reassemble groups including only those groups that were referred\r\n            // to by matching group index entries.  Note the new group index in\r\n            // seenGroups.\r\n            groups = [], k = 0;\r\n            for (i = 0; i < oldK; ++i) {\r\n              if (seenGroups[i]) {\r\n                seenGroups[i] = k++;\r\n                groups.push(oldGroups[i]);\r\n              }\r\n            }\r\n  \r\n            if (k > 1) {\r\n              // Reindex the group index using seenGroups to find the new index.\r\n              for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\r\n            } else {\r\n              groupIndex = null;\r\n            }\r\n            filterListeners[filterListeners.indexOf(update)] = k > 1\r\n                ? (reset = resetMany, update = updateMany)\r\n                : k === 1 ? (reset = resetOne, update = updateOne)\r\n                : reset = update = crossfilter_null;\r\n          } else if (k === 1) {\r\n            if (groupAll) return;\r\n            for (var i = 0; i < n; ++i) if (filters[i]) return;\r\n            groups = [], k = 0;\r\n            filterListeners[filterListeners.indexOf(update)] =\r\n            update = reset = crossfilter_null;\r\n          }\r\n        }\r\n  \r\n        // Reduces the specified selected or deselected records.\r\n        // This function is only used when the cardinality is greater than 1.\r\n        function updateMany(filterOne, added, removed) {\r\n          if (filterOne === one || resetNeeded) return;\r\n  \r\n          var i,\r\n              k,\r\n              n,\r\n              g;\r\n  \r\n          // Add the added values.\r\n          for (i = 0, n = added.length; i < n; ++i) {\r\n            if (!(filters[k = added[i]] & zero)) {\r\n              g = groups[groupIndex[k]];\r\n              g.value = reduceAdd(g.value, data[k]);\r\n            }\r\n          }\r\n  \r\n          // Remove the removed values.\r\n          for (i = 0, n = removed.length; i < n; ++i) {\r\n            if ((filters[k = removed[i]] & zero) === filterOne) {\r\n              g = groups[groupIndex[k]];\r\n              g.value = reduceRemove(g.value, data[k]);\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Reduces the specified selected or deselected records.\r\n        // This function is only used when the cardinality is 1.\r\n        function updateOne(filterOne, added, removed) {\r\n          if (filterOne === one || resetNeeded) return;\r\n  \r\n          var i,\r\n              k,\r\n              n,\r\n              g = groups[0];\r\n  \r\n          // Add the added values.\r\n          for (i = 0, n = added.length; i < n; ++i) {\r\n            if (!(filters[k = added[i]] & zero)) {\r\n              g.value = reduceAdd(g.value, data[k]);\r\n            }\r\n          }\r\n  \r\n          // Remove the removed values.\r\n          for (i = 0, n = removed.length; i < n; ++i) {\r\n            if ((filters[k = removed[i]] & zero) === filterOne) {\r\n              g.value = reduceRemove(g.value, data[k]);\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Recomputes the group reduce values from scratch.\r\n        // This function is only used when the cardinality is greater than 1.\r\n        function resetMany() {\r\n          var i,\r\n              g;\r\n  \r\n          // Reset all group values.\r\n          for (i = 0; i < k; ++i) {\r\n            groups[i].value = reduceInitial();\r\n          }\r\n  \r\n          // Add any selected records.\r\n          for (i = 0; i < n; ++i) {\r\n            if (!(filters[i] & zero)) {\r\n              g = groups[groupIndex[i]];\r\n              g.value = reduceAdd(g.value, data[i]);\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Recomputes the group reduce values from scratch.\r\n        // This function is only used when the cardinality is 1.\r\n        function resetOne() {\r\n          var i,\r\n              g = groups[0];\r\n  \r\n          // Reset the singleton group values.\r\n          g.value = reduceInitial();\r\n  \r\n          // Add any selected records.\r\n          for (i = 0; i < n; ++i) {\r\n            if (!(filters[i] & zero)) {\r\n              g.value = reduceAdd(g.value, data[i]);\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Returns the array of group values, in the dimension's natural order.\r\n        function all() {\r\n          if (resetNeeded) reset(), resetNeeded = false;\r\n          return groups;\r\n        }\r\n  \r\n        // Returns a new array containing the top K group values, in reduce order.\r\n        function top(k) {\r\n          var top = select(all(), 0, groups.length, k);\r\n          return heap.sort(top, 0, top.length);\r\n        }\r\n  \r\n        // Sets the reduce behavior for this group to use the specified functions.\r\n        // This method lazily recomputes the reduce values, waiting until needed.\r\n        function reduce(add, remove, initial) {\r\n          reduceAdd = add;\r\n          reduceRemove = remove;\r\n          reduceInitial = initial;\r\n          resetNeeded = true;\r\n          return group;\r\n        }\r\n  \r\n        // A convenience method for reducing by count.\r\n        function reduceCount() {\r\n          return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\r\n        }\r\n  \r\n        // A convenience method for reducing by sum(value).\r\n        function reduceSum(value) {\r\n          return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\r\n        }\r\n  \r\n        // Sets the reduce order, using the specified accessor.\r\n        function order(value) {\r\n          select = heapselect_by(valueOf);\r\n          heap = heap_by(valueOf);\r\n          function valueOf(d) { return value(d.value); }\r\n          return group;\r\n        }\r\n  \r\n        // A convenience method for natural ordering by reduce value.\r\n        function orderNatural() {\r\n          return order(crossfilter_identity);\r\n        }\r\n  \r\n        // Returns the cardinality of this group, irrespective of any filters.\r\n        function size() {\r\n          return k;\r\n        }\r\n  \r\n        // Removes this group and associated event listeners.\r\n        function dispose() {\r\n          var i = filterListeners.indexOf(update);\r\n          if (i >= 0) filterListeners.splice(i, 1);\r\n          i = indexListeners.indexOf(add);\r\n          if (i >= 0) indexListeners.splice(i, 1);\r\n          i = removeDataListeners.indexOf(removeData);\r\n          if (i >= 0) removeDataListeners.splice(i, 1);\r\n          return group;\r\n        }\r\n  \r\n        return reduceCount().orderNatural();\r\n      }\r\n  \r\n      // A convenience function for generating a singleton group.\r\n      function groupAll() {\r\n        var g = group(crossfilter_null), all = g.all;\r\n        delete g.all;\r\n        delete g.top;\r\n        delete g.order;\r\n        delete g.orderNatural;\r\n        delete g.size;\r\n        g.value = function() { return all()[0].value; };\r\n        return g;\r\n      }\r\n  \r\n      // Removes this dimension and associated groups and event listeners.\r\n      function dispose() {\r\n        dimensionGroups.forEach(function(group) { group.dispose(); });\r\n        var i = dataListeners.indexOf(preAdd);\r\n        if (i >= 0) dataListeners.splice(i, 1);\r\n        i = dataListeners.indexOf(postAdd);\r\n        if (i >= 0) dataListeners.splice(i, 1);\r\n        i = removeDataListeners.indexOf(removeData);\r\n        if (i >= 0) removeDataListeners.splice(i, 1);\r\n        m &= zero;\r\n        return filterAll();\r\n      }\r\n  \r\n      return dimension;\r\n    }\r\n  \r\n    // A convenience method for groupAll on a dummy dimension.\r\n    // This implementation can be optimized since it always has cardinality 1.\r\n    function groupAll() {\r\n      var group = {\r\n        reduce: reduce,\r\n        reduceCount: reduceCount,\r\n        reduceSum: reduceSum,\r\n        value: value,\r\n        dispose: dispose,\r\n        remove: dispose // for backwards-compatibility\r\n      };\r\n  \r\n      var reduceValue,\r\n          reduceAdd,\r\n          reduceRemove,\r\n          reduceInitial,\r\n          resetNeeded = true;\r\n  \r\n      // The group listens to the crossfilter for when any dimension changes, so\r\n      // that it can update the reduce value. It must also listen to the parent\r\n      // dimension for when data is added.\r\n      filterListeners.push(update);\r\n      dataListeners.push(add);\r\n  \r\n      // For consistency; actually a no-op since resetNeeded is true.\r\n      add(data, 0, n);\r\n  \r\n      // Incorporates the specified new values into this group.\r\n      function add(newData, n0) {\r\n        var i;\r\n  \r\n        if (resetNeeded) return;\r\n  \r\n        // Add the added values.\r\n        for (i = n0; i < n; ++i) {\r\n          if (!filters[i]) {\r\n            reduceValue = reduceAdd(reduceValue, data[i]);\r\n          }\r\n        }\r\n      }\r\n  \r\n      // Reduces the specified selected or deselected records.\r\n      function update(filterOne, added, removed) {\r\n        var i,\r\n            k,\r\n            n;\r\n  \r\n        if (resetNeeded) return;\r\n  \r\n        // Add the added values.\r\n        for (i = 0, n = added.length; i < n; ++i) {\r\n          if (!filters[k = added[i]]) {\r\n            reduceValue = reduceAdd(reduceValue, data[k]);\r\n          }\r\n        }\r\n  \r\n        // Remove the removed values.\r\n        for (i = 0, n = removed.length; i < n; ++i) {\r\n          if (filters[k = removed[i]] === filterOne) {\r\n            reduceValue = reduceRemove(reduceValue, data[k]);\r\n          }\r\n        }\r\n      }\r\n  \r\n      // Recomputes the group reduce value from scratch.\r\n      function reset() {\r\n        var i;\r\n  \r\n        reduceValue = reduceInitial();\r\n  \r\n        for (i = 0; i < n; ++i) {\r\n          if (!filters[i]) {\r\n            reduceValue = reduceAdd(reduceValue, data[i]);\r\n          }\r\n        }\r\n      }\r\n  \r\n      // Sets the reduce behavior for this group to use the specified functions.\r\n      // This method lazily recomputes the reduce value, waiting until needed.\r\n      function reduce(add, remove, initial) {\r\n        reduceAdd = add;\r\n        reduceRemove = remove;\r\n        reduceInitial = initial;\r\n        resetNeeded = true;\r\n        return group;\r\n      }\r\n  \r\n      // A convenience method for reducing by count.\r\n      function reduceCount() {\r\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\r\n      }\r\n  \r\n      // A convenience method for reducing by sum(value).\r\n      function reduceSum(value) {\r\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\r\n      }\r\n  \r\n      // Returns the computed reduce value.\r\n      function value() {\r\n        if (resetNeeded) reset(), resetNeeded = false;\r\n        return reduceValue;\r\n      }\r\n  \r\n      // Removes this group and associated event listeners.\r\n      function dispose() {\r\n        var i = filterListeners.indexOf(update);\r\n        if (i >= 0) filterListeners.splice(i);\r\n        i = dataListeners.indexOf(add);\r\n        if (i >= 0) dataListeners.splice(i);\r\n        return group;\r\n      }\r\n  \r\n      return reduceCount();\r\n    }\r\n  \r\n    // Returns the number of records in this crossfilter, irrespective of any filters.\r\n    function size() {\r\n      return n;\r\n    }\r\n  \r\n    return arguments.length\r\n        ? add(arguments[0])\r\n        : crossfilter;\r\n  }\r\n  \r\n  // Returns an array of size n, big enough to store ids up to m.\r\n  function crossfilter_index(n, m) {\r\n    return (m < 0x101\r\n        ? crossfilter_array8 : m < 0x10001\r\n        ? crossfilter_array16\r\n        : crossfilter_array32)(n);\r\n  }\r\n  \r\n  // Constructs a new array of size n, with sequential values from 0 to n - 1.\r\n  function crossfilter_range(n) {\r\n    var range = crossfilter_index(n, n);\r\n    for (var i = -1; ++i < n;) range[i] = i;\r\n    return range;\r\n  }\r\n  \r\n  function crossfilter_capacity(w) {\r\n    return w === 8\r\n        ? 0x100 : w === 16\r\n        ? 0x10000\r\n        : 0x100000000;\r\n  }\r\n  })(typeof exports !== 'undefined' && exports || this);","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}