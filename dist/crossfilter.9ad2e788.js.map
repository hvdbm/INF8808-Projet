{"version":3,"sources":["scripts/crossfilter.js"],"names":["global","factory","exports","module","define","amd","self","crossfilter","array8","arrayUntyped","array16","array32","arrayLengthen","arrayLengthenUntyped","arrayWiden","arrayWidenUntyped","Uint8Array","n","Uint16Array","Uint32Array","array","length","copy","constructor","set","width","Error","Array","i","bitarray","subarrays","masks","prototype","lengthen","len","add","m","w","one","offset","dest","src","truncate","j","zero","zeroExcept","zeroExceptMask","mask","only","onlyExcept","onlyOffset","onlyOne","xfilterArray","filterExact","bisect","value","values","left","right","filterRange","range","min","max","filterAll","xfilterFilter","cr_identity","d","cr_null","cr_zero","heap_by","f","heap","a","lo","hi","sift","sort","t","x","child","h","by","heapselect_by","heapselect","k","queue","Math","h$1","bisect_by","bisectLeft","mid","bisectRight","permute","index","deep","JSON","parse","stringify","reduceIncrement","p","reduceDecrement","reduceAdd","v","reduceSubtract","xfilterReduce","e","r","split","splice","get","obj","prop","call","reg","result","path","replace","REMOVED_INDEX","remove","removeData","dimension","groupAll","size","all","allFiltered","onChange","isElementFiltered","data","filters","filterListeners","dataListeners","removeDataListeners","callbacks","newData","n0","n1","concat","forEach","l","triggerOnChange","predicate","newIndex","removed","usePred","shouldRemove","index1","index2","push","index3","index4","maskForDimensions","dimensions","id","ignore_dimensions","iterable","accessorPath","filter","filterFunction","currentFilter","hasCurrentFilter","top","bottom","group","dispose","accessor","newValues","iterablesIndexCount","iterablesIndexFilterStatus","iterablesEmptyRows","sortRange","cr_range","A","B","b","refilter","refilterFunction","filterValue","filterValuePresent","indexListeners","dimensionGroups","lo0","hi0","unshift","preAdd","postAdd","tmp","log","newIterablesIndexCount","newIterablesIndexFilterStatus","i0","cr_index","unsortedIndex","sortMap","map","bounds","lo1","hi1","oldValues","oldIndex","oldIterablesIndexFilterStatus","old_n0","i1","oldiiclength","index5","reIndex","slice","oldDataIndex","filterIndexBounds","filterIndexFunction","added","valueIndexAdded","valueIndexRemoved","newAdded","newRemoved","isArray","undefined","indexLength","top_offset","toSkip","bottom_offset","key","reduce","reduceCount","reduceSum","order","orderNatural","groups","groupIndex","groupWidth","groupCapacity","capacity","select","reduceRemove","reduceInitial","update","reset","resetNeeded","n0old","arguments","oldGroups","initial","k0","g0","x0","x1","g","groupIncrement","indexOf","updateMany","resetMany","updateOne","resetOne","oldK","seenGroups","filterOne","filterOffset","notFilter","valueOf","reduceValue","cb","console","warn","eventName","version"],"mappings":"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","file":"crossfilter.9ad2e788.js","sourceRoot":"..","sourcesContent":["(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = global || self, global.crossfilter = factory());\r\n}(this, (function () { 'use strict';\r\n\r\n  let array8 = arrayUntyped,\r\n      array16 = arrayUntyped,\r\n      array32 = arrayUntyped,\r\n      arrayLengthen = arrayLengthenUntyped,\r\n      arrayWiden = arrayWidenUntyped;\r\n  if (typeof Uint8Array !== \"undefined\") {\r\n    array8 = function(n) { return new Uint8Array(n); };\r\n    array16 = function(n) { return new Uint16Array(n); };\r\n    array32 = function(n) { return new Uint32Array(n); };\r\n\r\n    arrayLengthen = function(array, length) {\r\n      if (array.length >= length) return array;\r\n      var copy = new array.constructor(length);\r\n      copy.set(array);\r\n      return copy;\r\n    };\r\n\r\n    arrayWiden = function(array, width) {\r\n      var copy;\r\n      switch (width) {\r\n        case 16: copy = array16(array.length); break;\r\n        case 32: copy = array32(array.length); break;\r\n        default: throw new Error(\"invalid array width!\");\r\n      }\r\n      copy.set(array);\r\n      return copy;\r\n    };\r\n  }\r\n\r\n  function arrayUntyped(n) {\r\n    var array = new Array(n), i = -1;\r\n    while (++i < n) array[i] = 0;\r\n    return array;\r\n  }\r\n\r\n  function arrayLengthenUntyped(array, length) {\r\n    var n = array.length;\r\n    while (n < length) array[n++] = 0;\r\n    return array;\r\n  }\r\n\r\n  function arrayWidenUntyped(array, width) {\r\n    if (width > 32) throw new Error(\"invalid array width!\");\r\n    return array;\r\n  }\r\n\r\n  // An arbitrarily-wide array of bitmasks\r\n  function bitarray(n) {\r\n    this.length = n;\r\n    this.subarrays = 1;\r\n    this.width = 8;\r\n    this.masks = {\r\n      0: 0\r\n    };\r\n\r\n    this[0] = array8(n);\r\n  }\r\n\r\n  bitarray.prototype.lengthen = function(n) {\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      this[i] = arrayLengthen(this[i], n);\r\n    }\r\n    this.length = n;\r\n  };\r\n\r\n  // Reserve a new bit index in the array, returns {offset, one}\r\n  bitarray.prototype.add = function() {\r\n    var m, w, one, i, len;\r\n\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      m = this.masks[i];\r\n      w = this.width - (32 * i);\r\n      // isolate the rightmost zero bit and return it as an unsigned int of 32 bits, if NaN or -1, return a 0 \r\n      one = (~m & (m + 1)) >>> 0;\r\n\r\n      if (w >= 32 && !one) {\r\n        continue;\r\n      }\r\n\r\n      if (w < 32 && (one & (1 << w))) {\r\n        // widen this subarray\r\n        this[i] = arrayWiden(this[i], w <<= 1);\r\n        this.width = 32 * i + w;\r\n      }\r\n\r\n      this.masks[i] |= one;\r\n\r\n      return {\r\n        offset: i,\r\n        one: one\r\n      };\r\n    }\r\n\r\n    // add a new subarray\r\n    this[this.subarrays] = array8(this.length);\r\n    this.masks[this.subarrays] = 1;\r\n    this.width += 8;\r\n    return {\r\n      offset: this.subarrays++,\r\n      one: 1\r\n    };\r\n  };\r\n\r\n  // Copy record from index src to index dest\r\n  bitarray.prototype.copy = function(dest, src) {\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      this[i][dest] = this[i][src];\r\n    }\r\n  };\r\n\r\n  // Truncate the array to the given length\r\n  bitarray.prototype.truncate = function(n) {\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      for (var j = this.length - 1; j >= n; j--) {\r\n        this[i][j] = 0;\r\n      }\r\n    }\r\n    this.length = n;\r\n  };\r\n\r\n  // Checks that all bits for the given index are 0\r\n  bitarray.prototype.zero = function(n) {\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      if (this[i][n]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Checks that all bits for the given index are 0 except for possibly one\r\n  bitarray.prototype.zeroExcept = function(n, offset, zero) {\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      if (i === offset ? this[i][n] & zero : this[i][n]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Checks that all bits for the given index are 0 except for the specified mask.\r\n  // The mask should be an array of the same size as the filter subarrays width.\r\n  bitarray.prototype.zeroExceptMask = function(n, mask) {\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      if (this[i][n] & mask[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Checks that only the specified bit is set for the given index\r\n  bitarray.prototype.only = function(n, offset, one) {\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      if (this[i][n] != (i === offset ? one : 0)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Checks that only the specified bit is set for the given index except for possibly one other\r\n  bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\r\n    var mask;\r\n    var i, len;\r\n    for (i = 0, len = this.subarrays; i < len; ++i) {\r\n      mask = this[i][n];\r\n      if (i === offset)\r\n        mask = (mask & zero) >>> 0;\r\n      if (mask != (i === onlyOffset ? onlyOne : 0)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  var xfilterArray = {\r\n    array8: arrayUntyped,\r\n    array16: arrayUntyped,\r\n    array32: arrayUntyped,\r\n    arrayLengthen: arrayLengthenUntyped,\r\n    arrayWiden: arrayWidenUntyped,\r\n    bitarray: bitarray\r\n  };\r\n\r\n  const filterExact = (bisect, value) => {\r\n    return function(values) {\r\n      var n = values.length;\r\n      return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\r\n    };\r\n  };\r\n\r\n  const filterRange = (bisect, range) => {\r\n    var min = range[0],\r\n        max = range[1];\r\n    return function(values) {\r\n      var n = values.length;\r\n      return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\r\n    };\r\n  };\r\n\r\n  const filterAll = values => {\r\n    return [0, values.length];\r\n  };\r\n\r\n  var xfilterFilter = {\r\n    filterExact,\r\n    filterRange,\r\n    filterAll\r\n  };\r\n\r\n  var cr_identity = d => {\r\n    return d;\r\n  };\r\n\r\n  var cr_null = () =>  {\r\n    return null;\r\n  };\r\n\r\n  var cr_zero = () => {\r\n    return 0;\r\n  };\r\n\r\n  function heap_by(f) {\r\n\r\n    // Builds a binary heap within the specified array a[lo:hi]. The heap has the\r\n    // property such that the parent a[lo+i] is always less than or equal to its\r\n    // two children: a[lo+2*i+1] and a[lo+2*i+2].\r\n    function heap(a, lo, hi) {\r\n      var n = hi - lo,\r\n          i = (n >>> 1) + 1;\r\n      while (--i > 0) sift(a, i, n, lo);\r\n      return a;\r\n    }\r\n\r\n    // Sorts the specified array a[lo:hi] in descending order, assuming it is\r\n    // already a heap.\r\n    function sort(a, lo, hi) {\r\n      var n = hi - lo,\r\n          t;\r\n      while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\r\n      return a;\r\n    }\r\n\r\n    // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\r\n    // slice of array a[lo:lo+n]. This method can also be used to update the heap\r\n    // incrementally, without incurring the full cost of reconstructing the heap.\r\n    function sift(a, i, n, lo) {\r\n      var d = a[--lo + i],\r\n          x = f(d),\r\n          child;\r\n      while ((child = i << 1) <= n) {\r\n        if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\r\n        if (x <= f(a[lo + child])) break;\r\n        a[lo + i] = a[lo + child];\r\n        i = child;\r\n      }\r\n      a[lo + i] = d;\r\n    }\r\n\r\n    heap.sort = sort;\r\n    return heap;\r\n  }\r\n\r\n  const h = heap_by(cr_identity);\r\n  h.by = heap_by;\r\n\r\n  function heapselect_by(f) {\r\n    var heap = h.by(f);\r\n\r\n    // Returns a new array containing the top k elements in the array a[lo:hi].\r\n    // The returned array is not sorted, but maintains the heap property. If k is\r\n    // greater than hi - lo, then fewer than k elements will be returned. The\r\n    // order of elements in a is unchanged by this operation.\r\n    function heapselect(a, lo, hi, k) {\r\n      var queue = new Array(k = Math.min(hi - lo, k)),\r\n          min,\r\n          i,\r\n          d;\r\n\r\n      for (i = 0; i < k; ++i) queue[i] = a[lo++];\r\n      heap(queue, 0, k);\r\n\r\n      if (lo < hi) {\r\n        min = f(queue[0]);\r\n        do {\r\n          if (f(d = a[lo]) > min) {\r\n            queue[0] = d;\r\n            min = f(heap(queue, 0, k)[0]);\r\n          }\r\n        } while (++lo < hi);\r\n      }\r\n\r\n      return queue;\r\n    }\r\n\r\n    return heapselect;\r\n  }\r\n\r\n\r\n  const h$1 = heapselect_by(cr_identity);\r\n  h$1.by = heapselect_by; // assign the raw function to the export as well\r\n\r\n  function bisect_by(f) {\r\n\r\n    // Locate the insertion point for x in a to maintain sorted order. The\r\n    // arguments lo and hi may be used to specify a subset of the array which\r\n    // should be considered; by default the entire array is used. If x is already\r\n    // present in a, the insertion point will be before (to the left of) any\r\n    // existing entries. The return value is suitable for use as the first\r\n    // argument to `array.splice` assuming that a is already sorted.\r\n    //\r\n    // The returned insertion point i partitions the array a into two halves so\r\n    // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\r\n    // a[i:hi] for the right side.\r\n    function bisectLeft(a, x, lo, hi) {\r\n      while (lo < hi) {\r\n        var mid = lo + hi >>> 1;\r\n        if (f(a[mid]) < x) lo = mid + 1;\r\n        else hi = mid;\r\n      }\r\n      return lo;\r\n    }\r\n\r\n    // Similar to bisectLeft, but returns an insertion point which comes after (to\r\n    // the right of) any existing entries of x in a.\r\n    //\r\n    // The returned insertion point i partitions the array into two halves so that\r\n    // all v <= x for v in a[lo:i] for the left side and all v > x for v in\r\n    // a[i:hi] for the right side.\r\n    function bisectRight(a, x, lo, hi) {\r\n      while (lo < hi) {\r\n        var mid = lo + hi >>> 1;\r\n        if (x < f(a[mid])) hi = mid;\r\n        else lo = mid + 1;\r\n      }\r\n      return lo;\r\n    }\r\n\r\n    bisectRight.right = bisectRight;\r\n    bisectRight.left = bisectLeft;\r\n    return bisectRight;\r\n  }\r\n\r\n  const bisect = bisect_by(cr_identity);\r\n  bisect.by = bisect_by; // assign the raw function to the export as well\r\n\r\n  var permute = (array, index, deep) => {\r\n    for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\r\n      copy[i] = array[index[i]];\r\n    }\r\n    return copy;\r\n  };\r\n\r\n  const reduceIncrement = p => {\r\n    return p + 1;\r\n  };\r\n\r\n  const reduceDecrement = p => {\r\n    return p - 1;\r\n  };\r\n\r\n  const reduceAdd = f => {\r\n    return function(p, v) {\r\n      return p + +f(v);\r\n    };\r\n  };\r\n\r\n  const reduceSubtract = f => {\r\n    return function(p, v) {\r\n      return p - f(v);\r\n    };\r\n  };\r\n\r\n  var xfilterReduce = {\r\n    reduceIncrement,\r\n    reduceDecrement,\r\n    reduceAdd,\r\n    reduceSubtract\r\n  };\r\n\r\n  function deep(t,e,i,n,r){for(r in n=(i=i.split(\".\")).splice(-1,1),i)e=e[i[r]]=e[i[r]]||{};return t(e,n)}\r\n\r\n  // Note(cg): result was previsouly using lodash.result, not ESM compatible.\r\n   \r\n  const get = (obj, prop) => {\r\n    const value = obj[prop];\r\n    return (typeof value === 'function') ? value.call(obj) : value;\r\n  };\r\n\r\n  /**\r\n   * get value of object at a deep path.\r\n   * if the resolved value is a function,\r\n   * it's invoked with the `this` binding of \r\n   * its parent object and its result is returned. \r\n   *  \r\n   * @param  {Object} obj  the object (e.g. { 'a': [{ 'b': { 'c1': 3, 'c2': 4} }], 'd': {e:1} }; )\r\n   * @param  {String} path deep path (e.g. `d.e`` or `a[0].b.c1`. Dot notation (a.0.b)is also supported)\r\n   * @return {Any}      the resolved value\r\n   */\r\n  const reg = /\\[([\\w\\d]+)\\]/g;\r\n  var result = (obj, path) => {\r\n    return deep(get, obj, path.replace(reg, '.$1'))\r\n  };\r\n\r\n  // constants\r\n  var REMOVED_INDEX = -1;\r\n\r\n  crossfilter.heap = h;\r\n  crossfilter.heapselect = h$1;\r\n  crossfilter.bisect = bisect;\r\n  crossfilter.permute = permute;\r\n\r\n  function crossfilter() {\r\n    var crossfilter = {\r\n      add: add,\r\n      remove: removeData,\r\n      dimension: dimension,\r\n      groupAll: groupAll,\r\n      size: size,\r\n      all: all,\r\n      allFiltered: allFiltered,\r\n      onChange: onChange,\r\n      isElementFiltered: isElementFiltered\r\n    };\r\n\r\n    var data = [], // the records\r\n        n = 0, // the number of records; data.length\r\n        filters, // 1 is filtered out\r\n        filterListeners = [], // when the filters change\r\n        dataListeners = [], // when data is added\r\n        removeDataListeners = [], // when data is removed\r\n        callbacks = [];\r\n\r\n    filters = new xfilterArray.bitarray(0);\r\n\r\n    // Adds the specified new records to this crossfilter.\r\n    function add(newData) {\r\n      var n0 = n,\r\n          n1 = newData.length;\r\n\r\n      // If there's actually new data to add…\r\n      // Merge the new data into the existing data.\r\n      // Lengthen the filter bitset to handle the new records.\r\n      // Notify listeners (dimensions and groups) that new data is available.\r\n      if (n1) {\r\n        data = data.concat(newData);\r\n        filters.lengthen(n += n1);\r\n        dataListeners.forEach(function(l) { l(newData, n0, n1); });\r\n        triggerOnChange('dataAdded');\r\n      }\r\n\r\n      return crossfilter;\r\n    }\r\n\r\n    // Removes all records that match the current filters, or if a predicate function is passed,\r\n    // removes all records matching the predicate (ignoring filters).\r\n    function removeData(predicate) {\r\n      var // Mapping from old record indexes to new indexes (after records removed)\r\n          newIndex = new Array(n),\r\n          removed = [],\r\n          usePred = typeof predicate === 'function',\r\n          shouldRemove = function (i) {\r\n            return usePred ? predicate(data[i], i) : filters.zero(i)\r\n          };\r\n\r\n      for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\r\n        if ( shouldRemove(index1) ) {\r\n          removed.push(index1);\r\n          newIndex[index1] = REMOVED_INDEX;\r\n        } else {\r\n          newIndex[index1] = index2++;\r\n        }\r\n      }\r\n\r\n      // Remove all matching records from groups.\r\n      filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\r\n\r\n      // Update indexes.\r\n      removeDataListeners.forEach(function(l) { l(newIndex); });\r\n\r\n      // Remove old filters and data by overwriting.\r\n      for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\r\n        if ( newIndex[index3] !== REMOVED_INDEX ) {\r\n          if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\r\n          ++index4;\r\n        }\r\n      }\r\n\r\n      data.length = n = index4;\r\n      filters.truncate(index4);\r\n      triggerOnChange('dataRemoved');\r\n    }\r\n\r\n    function maskForDimensions(dimensions) {\r\n      var n,\r\n          d,\r\n          len,\r\n          id,\r\n          mask = Array(filters.subarrays);\r\n      for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\r\n      for (d = 0, len = dimensions.length; d < len; d++) {\r\n        // The top bits of the ID are the subarray offset and the lower bits are the bit\r\n        // offset of the \"one\" mask.\r\n        id = dimensions[d].id();\r\n        mask[id >> 7] &= ~(0x1 << (id & 0x3f));\r\n      }\r\n      return mask;\r\n    }\r\n\r\n    // Return true if the data element at index i is filtered IN.\r\n    // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\r\n    function isElementFiltered(i, ignore_dimensions) {\r\n      var mask = maskForDimensions(ignore_dimensions || []);\r\n      return filters.zeroExceptMask(i,mask);\r\n    }\r\n\r\n    // Adds a new dimension with the specified value accessor function.\r\n    function dimension(value, iterable) {\r\n\r\n      if (typeof value === 'string') {\r\n        var accessorPath = value;\r\n        value = function(d) { return result(d, accessorPath); };\r\n      }\r\n\r\n      var dimension = {\r\n        filter: filter,\r\n        filterExact: filterExact,\r\n        filterRange: filterRange,\r\n        filterFunction: filterFunction,\r\n        filterAll: filterAll,\r\n        currentFilter: currentFilter,\r\n        hasCurrentFilter: hasCurrentFilter,\r\n        top: top,\r\n        bottom: bottom,\r\n        group: group,\r\n        groupAll: groupAll,\r\n        dispose: dispose,\r\n        remove: dispose, // for backwards-compatibility\r\n        accessor: value,\r\n        id: function() { return id; }\r\n      };\r\n\r\n      var one, // lowest unset bit as mask, e.g., 00001000\r\n          zero, // inverted one, e.g., 11110111\r\n          offset, // offset into the filters arrays\r\n          id, // unique ID for this dimension (reused when dimensions are disposed)\r\n          values, // sorted, cached array\r\n          index, // maps sorted value index -> record index (in data)\r\n          newValues, // temporary array storing newly-added values\r\n          newIndex, // temporary array storing newly-added index\r\n          iterablesIndexCount,\r\n          iterablesIndexFilterStatus,\r\n          iterablesEmptyRows = [],\r\n          sortRange = function(n) {\r\n            return cr_range(n).sort(function(A, B) {\r\n              var a = newValues[A], b = newValues[B];\r\n              return a < b ? -1 : a > b ? 1 : A - B;\r\n            });\r\n          },\r\n          refilter = xfilterFilter.filterAll, // for recomputing filter\r\n          refilterFunction, // the custom filter function in use\r\n          filterValue, // the value used for filtering (value, array, function or undefined)\r\n          filterValuePresent, // true if filterValue contains something\r\n          indexListeners = [], // when data is added\r\n          dimensionGroups = [],\r\n          lo0 = 0,\r\n          hi0 = 0,\r\n          t = 0,\r\n          k;\r\n\r\n      // Updating a dimension is a two-stage process. First, we must update the\r\n      // associated filters for the newly-added records. Once all dimensions have\r\n      // updated their filters, the groups are notified to update.\r\n      dataListeners.unshift(preAdd);\r\n      dataListeners.push(postAdd);\r\n\r\n      removeDataListeners.push(removeData);\r\n\r\n      // Add a new dimension in the filter bitmap and store the offset and bitmask.\r\n      var tmp = filters.add();\r\n      offset = tmp.offset;\r\n      one = tmp.one;\r\n      zero = ~one;\r\n\r\n      // Create a unique ID for the dimension\r\n      // IDs will be re-used if dimensions are disposed.\r\n      // For internal use the ID is the subarray offset shifted left 7 bits or'd with the\r\n      // bit offset of the set bit in the dimension's \"one\" mask.\r\n      id = (offset << 7) | (Math.log(one) / Math.log(2));\r\n\r\n      preAdd(data, 0, n);\r\n      postAdd(data, 0, n);\r\n\r\n      // Incorporates the specified new records into this dimension.\r\n      // This function is responsible for updating filters, values, and index.\r\n      function preAdd(newData, n0, n1) {\r\n        var newIterablesIndexCount,\r\n            newIterablesIndexFilterStatus;\r\n\r\n        if (iterable){\r\n          // Count all the values\r\n          t = 0;\r\n          j = 0;\r\n          k = [];\r\n\r\n          for (var i0 = 0; i0 < newData.length; i0++) {\r\n            for(j = 0, k = value(newData[i0]); j < k.length; j++) {\r\n              t++;\r\n            }\r\n          }\r\n\r\n          newValues = [];\r\n          newIterablesIndexCount = cr_range(newData.length);\r\n          newIterablesIndexFilterStatus = cr_index(t,1);\r\n          var unsortedIndex = cr_range(t);\r\n\r\n          for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\r\n            k = value(newData[index1]);\r\n            //\r\n            if(!k.length){\r\n              newIterablesIndexCount[index1] = 0;\r\n              iterablesEmptyRows.push(index1 + n0);\r\n              continue;\r\n            }\r\n            newIterablesIndexCount[index1] = k.length;\r\n            for (j = 0; j < k.length; j++) {\r\n              newValues.push(k[j]);\r\n              unsortedIndex[l] = index1;\r\n              l++;\r\n            }\r\n          }\r\n\r\n          // Create the Sort map used to sort both the values and the valueToData indices\r\n          var sortMap = sortRange(t);\r\n\r\n          // Use the sortMap to sort the newValues\r\n          newValues = permute(newValues, sortMap);\r\n\r\n\r\n          // Use the sortMap to sort the unsortedIndex map\r\n          // newIndex should be a map of sortedValue -> crossfilterData\r\n          newIndex = permute(unsortedIndex, sortMap);\r\n\r\n        } else {\r\n          // Permute new values into natural order using a standard sorted index.\r\n          newValues = newData.map(value);\r\n          newIndex = sortRange(n1);\r\n          newValues = permute(newValues, newIndex);\r\n        }\r\n\r\n        // Bisect newValues to determine which new records are selected.\r\n        var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\r\n\r\n        var index2, index3, index4;\r\n        if(iterable) {\r\n          n1 = t;\r\n          if (refilterFunction) {\r\n            for (index2 = 0; index2 < n1; ++index2) {\r\n              if (!refilterFunction(newValues[index2], index2)) {\r\n                if(--newIterablesIndexCount[newIndex[index2]] === 0) {\r\n                  filters[offset][newIndex[index2] + n0] |= one;\r\n                }\r\n                newIterablesIndexFilterStatus[index2] = 1;\r\n              }\r\n            }\r\n          } else {\r\n            for (index3 = 0; index3 < lo1; ++index3) {\r\n              if(--newIterablesIndexCount[newIndex[index3]] === 0) {\r\n                filters[offset][newIndex[index3] + n0] |= one;\r\n              }\r\n              newIterablesIndexFilterStatus[index3] = 1;\r\n            }\r\n            for (index4 = hi1; index4 < n1; ++index4) {\r\n              if(--newIterablesIndexCount[newIndex[index4]] === 0) {\r\n                filters[offset][newIndex[index4] + n0] |= one;\r\n              }\r\n              newIterablesIndexFilterStatus[index4] = 1;\r\n            }\r\n          }\r\n        } else {\r\n          if (refilterFunction) {\r\n            for (index2 = 0; index2 < n1; ++index2) {\r\n              if (!refilterFunction(newValues[index2], index2)) {\r\n                filters[offset][newIndex[index2] + n0] |= one;\r\n              }\r\n            }\r\n          } else {\r\n            for (index3 = 0; index3 < lo1; ++index3) {\r\n              filters[offset][newIndex[index3] + n0] |= one;\r\n            }\r\n            for (index4 = hi1; index4 < n1; ++index4) {\r\n              filters[offset][newIndex[index4] + n0] |= one;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If this dimension previously had no data, then we don't need to do the\r\n        // more expensive merge operation; use the new values and index as-is.\r\n        if (!n0) {\r\n          values = newValues;\r\n          index = newIndex;\r\n          iterablesIndexCount = newIterablesIndexCount;\r\n          iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\r\n          lo0 = lo1;\r\n          hi0 = hi1;\r\n          return;\r\n        }\r\n\r\n\r\n\r\n        var oldValues = values,\r\n          oldIndex = index,\r\n          oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\r\n          old_n0,\r\n          i1 = 0;\r\n\r\n        i0 = 0;\r\n\r\n        if(iterable){\r\n          old_n0 = n0;\r\n          n0 = oldValues.length;\r\n          n1 = t;\r\n        }\r\n\r\n        // Otherwise, create new arrays into which to merge new and old.\r\n        values = iterable ? new Array(n0 + n1) : new Array(n);\r\n        index = iterable ? new Array(n0 + n1) : cr_index(n, n);\r\n        if(iterable) iterablesIndexFilterStatus = cr_index(n0 + n1, 1);\r\n\r\n        // Concatenate the newIterablesIndexCount onto the old one.\r\n        if(iterable) {\r\n          var oldiiclength = iterablesIndexCount.length;\r\n          iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\r\n          for(var j=0; j+oldiiclength < n; j++) {\r\n            iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\r\n          }\r\n        }\r\n\r\n        // Merge the old and new sorted values, and old and new index.\r\n        var index5 = 0;\r\n        for (; i0 < n0 && i1 < n1; ++index5) {\r\n          if (oldValues[i0] < newValues[i1]) {\r\n            values[index5] = oldValues[i0];\r\n            if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\r\n            index[index5] = oldIndex[i0++];\r\n          } else {\r\n            values[index5] = newValues[i1];\r\n            if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\r\n            index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\r\n          }\r\n        }\r\n\r\n        // Add any remaining old values.\r\n        for (; i0 < n0; ++i0, ++index5) {\r\n          values[index5] = oldValues[i0];\r\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\r\n          index[index5] = oldIndex[i0];\r\n        }\r\n\r\n        // Add any remaining new values.\r\n        for (; i1 < n1; ++i1, ++index5) {\r\n          values[index5] = newValues[i1];\r\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\r\n          index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\r\n        }\r\n\r\n        // Bisect again to recompute lo0 and hi0.\r\n        bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\r\n      }\r\n\r\n      // When all filters have updated, notify index listeners of the new values.\r\n      function postAdd(newData, n0, n1) {\r\n        indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\r\n        newValues = newIndex = null;\r\n      }\r\n\r\n      function removeData(reIndex) {\r\n        if (iterable) {\r\n          for (var i0 = 0, i1 = 0; i0 < iterablesEmptyRows.length; i0++) {\r\n            if (reIndex[iterablesEmptyRows[i0]] !== REMOVED_INDEX) {\r\n              iterablesEmptyRows[i1] = reIndex[iterablesEmptyRows[i0]];\r\n              i1++;\r\n            }\r\n          }\r\n          iterablesEmptyRows.length = i1;\r\n          for (i0 = 0, i1 = 0; i0 < n; i0++) {\r\n            if (reIndex[i0] !== REMOVED_INDEX) {\r\n              if (i1 !== i0) iterablesIndexCount[i1] = iterablesIndexCount[i0];\r\n              i1++;\r\n            }\r\n          }\r\n          iterablesIndexCount = iterablesIndexCount.slice(0, i1);\r\n        }\r\n        // Rewrite our index, overwriting removed values\r\n        var n0 = values.length;\r\n        for (var i = 0, j = 0, oldDataIndex; i < n0; ++i) {\r\n          oldDataIndex = index[i];\r\n          if (reIndex[oldDataIndex] !== REMOVED_INDEX) {\r\n            if (i !== j) values[j] = values[i];\r\n            index[j] = reIndex[oldDataIndex];\r\n            if (iterable) {\r\n              iterablesIndexFilterStatus[j] = iterablesIndexFilterStatus[i];\r\n            }\r\n            ++j;\r\n          }\r\n        }\r\n        values.length = j;\r\n        if (iterable) iterablesIndexFilterStatus = iterablesIndexFilterStatus.slice(0, j);\r\n        while (j < n0) index[j++] = 0;\r\n\r\n        // Bisect again to recompute lo0 and hi0.\r\n        var bounds = refilter(values);\r\n        lo0 = bounds[0], hi0 = bounds[1];\r\n      }\r\n\r\n      // Updates the selected values based on the specified bounds [lo, hi].\r\n      // This implementation is used by all the public filter methods.\r\n      function filterIndexBounds(bounds) {\r\n\r\n        var lo1 = bounds[0],\r\n            hi1 = bounds[1];\r\n\r\n        if (refilterFunction) {\r\n          refilterFunction = null;\r\n          filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === values.length);\r\n          lo0 = lo1;\r\n          hi0 = hi1;\r\n          return dimension;\r\n        }\r\n\r\n        var i,\r\n            j,\r\n            k,\r\n            added = [],\r\n            removed = [],\r\n            valueIndexAdded = [],\r\n            valueIndexRemoved = [];\r\n\r\n\r\n        // Fast incremental update based on previous lo index.\r\n        if (lo1 < lo0) {\r\n          for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\r\n            added.push(index[i]);\r\n            valueIndexAdded.push(i);\r\n          }\r\n        } else if (lo1 > lo0) {\r\n          for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\r\n            removed.push(index[i]);\r\n            valueIndexRemoved.push(i);\r\n          }\r\n        }\r\n\r\n        // Fast incremental update based on previous hi index.\r\n        if (hi1 > hi0) {\r\n          for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\r\n            added.push(index[i]);\r\n            valueIndexAdded.push(i);\r\n          }\r\n        } else if (hi1 < hi0) {\r\n          for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\r\n            removed.push(index[i]);\r\n            valueIndexRemoved.push(i);\r\n          }\r\n        }\r\n\r\n        if(!iterable) {\r\n          // Flip filters normally.\r\n\r\n          for(i=0; i<added.length; i++) {\r\n            filters[offset][added[i]] ^= one;\r\n          }\r\n\r\n          for(i=0; i<removed.length; i++) {\r\n            filters[offset][removed[i]] ^= one;\r\n          }\r\n\r\n        } else {\r\n          // For iterables, we need to figure out if the row has been completely removed vs partially included\r\n          // Only count a row as added if it is not already being aggregated. Only count a row\r\n          // as removed if the last element being aggregated is removed.\r\n\r\n          var newAdded = [];\r\n          var newRemoved = [];\r\n          for (i = 0; i < added.length; i++) {\r\n            iterablesIndexCount[added[i]]++;\r\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\r\n            if(iterablesIndexCount[added[i]] === 1) {\r\n              filters[offset][added[i]] ^= one;\r\n              newAdded.push(added[i]);\r\n            }\r\n          }\r\n          for (i = 0; i < removed.length; i++) {\r\n            iterablesIndexCount[removed[i]]--;\r\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\r\n            if(iterablesIndexCount[removed[i]] === 0) {\r\n              filters[offset][removed[i]] ^= one;\r\n              newRemoved.push(removed[i]);\r\n            }\r\n          }\r\n\r\n          added = newAdded;\r\n          removed = newRemoved;\r\n\r\n          // Now handle empty rows.\r\n          if(refilter === xfilterFilter.filterAll) {\r\n            for(i = 0; i < iterablesEmptyRows.length; i++) {\r\n              if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\r\n                // Was not in the filter, so set the filter and add\r\n                filters[offset][k] ^= one;\r\n                added.push(k);\r\n              }\r\n            }\r\n          } else {\r\n            // filter in place - remove empty rows if necessary\r\n            for(i = 0; i < iterablesEmptyRows.length; i++) {\r\n              if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\r\n                // Was in the filter, so set the filter and remove\r\n                filters[offset][k] ^= one;\r\n                removed.push(k);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        lo0 = lo1;\r\n        hi0 = hi1;\r\n        filterListeners.forEach(function(l) { l(one, offset, added, removed); });\r\n        triggerOnChange('filtered');\r\n        return dimension;\r\n      }\r\n\r\n      // Filters this dimension using the specified range, value, or null.\r\n      // If the range is null, this is equivalent to filterAll.\r\n      // If the range is an array, this is equivalent to filterRange.\r\n      // Otherwise, this is equivalent to filterExact.\r\n      function filter(range) {\r\n        return range == null\r\n            ? filterAll() : Array.isArray(range)\r\n            ? filterRange(range) : typeof range === \"function\"\r\n            ? filterFunction(range)\r\n            : filterExact(range);\r\n      }\r\n\r\n      // Filters this dimension to select the exact value.\r\n      function filterExact(value) {\r\n        filterValue = value;\r\n        filterValuePresent = true;\r\n        return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\r\n      }\r\n\r\n      // Filters this dimension to select the specified range [lo, hi].\r\n      // The lower bound is inclusive, and the upper bound is exclusive.\r\n      function filterRange(range) {\r\n        filterValue = range;\r\n        filterValuePresent = true;\r\n        return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\r\n      }\r\n\r\n      // Clears any filters on this dimension.\r\n      function filterAll() {\r\n        filterValue = undefined;\r\n        filterValuePresent = false;\r\n        return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\r\n      }\r\n\r\n      // Filters this dimension using an arbitrary function.\r\n      function filterFunction(f) {\r\n        filterValue = f;\r\n        filterValuePresent = true;\r\n\r\n        refilterFunction = f;\r\n        refilter = xfilterFilter.filterAll;\r\n\r\n        filterIndexFunction(f, false);\r\n\r\n        var bounds = refilter(values);\r\n        lo0 = bounds[0], hi0 = bounds[1];\r\n\r\n        return dimension;\r\n      }\r\n\r\n      function filterIndexFunction(f, filterAll) {\r\n        var i,\r\n            k,\r\n            x,\r\n            added = [],\r\n            removed = [],\r\n            valueIndexAdded = [],\r\n            valueIndexRemoved = [],\r\n            indexLength = values.length;\r\n\r\n        if(!iterable) {\r\n          for (i = 0; i < indexLength; ++i) {\r\n            if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\r\n              if (x) added.push(k);\r\n              else removed.push(k);\r\n            }\r\n          }\r\n        }\r\n\r\n        if(iterable) {\r\n          for(i=0; i < indexLength; ++i) {\r\n            if(f(values[i], i)) {\r\n              added.push(index[i]);\r\n              valueIndexAdded.push(i);\r\n            } else {\r\n              removed.push(index[i]);\r\n              valueIndexRemoved.push(i);\r\n            }\r\n          }\r\n        }\r\n\r\n        if(!iterable) {\r\n          for(i=0; i<added.length; i++) {\r\n            if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\r\n          }\r\n\r\n          for(i=0; i<removed.length; i++) {\r\n            if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\r\n          }\r\n        } else {\r\n\r\n          var newAdded = [];\r\n          var newRemoved = [];\r\n          for (i = 0; i < added.length; i++) {\r\n            // First check this particular value needs to be added\r\n            if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\r\n              iterablesIndexCount[added[i]]++;\r\n              iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\r\n              if(iterablesIndexCount[added[i]] === 1) {\r\n                filters[offset][added[i]] ^= one;\r\n                newAdded.push(added[i]);\r\n              }\r\n            }\r\n          }\r\n          for (i = 0; i < removed.length; i++) {\r\n            // First check this particular value needs to be removed\r\n            if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\r\n              iterablesIndexCount[removed[i]]--;\r\n              iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\r\n              if(iterablesIndexCount[removed[i]] === 0) {\r\n                filters[offset][removed[i]] ^= one;\r\n                newRemoved.push(removed[i]);\r\n              }\r\n            }\r\n          }\r\n\r\n          added = newAdded;\r\n          removed = newRemoved;\r\n\r\n          // Now handle empty rows.\r\n          if(filterAll) {\r\n            for(i = 0; i < iterablesEmptyRows.length; i++) {\r\n              if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\r\n                // Was not in the filter, so set the filter and add\r\n                filters[offset][k] ^= one;\r\n                added.push(k);\r\n              }\r\n            }\r\n          } else {\r\n            // filter in place - remove empty rows if necessary\r\n            for(i = 0; i < iterablesEmptyRows.length; i++) {\r\n              if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\r\n                // Was in the filter, so set the filter and remove\r\n                filters[offset][k] ^= one;\r\n                removed.push(k);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        filterListeners.forEach(function(l) { l(one, offset, added, removed); });\r\n        triggerOnChange('filtered');\r\n      }\r\n\r\n      function currentFilter() {\r\n        return filterValue;\r\n      }\r\n\r\n      function hasCurrentFilter() {\r\n        return filterValuePresent;\r\n      }\r\n\r\n      // Returns the top K selected records based on this dimension's order.\r\n      // Note: observes this dimension's filter, unlike group and groupAll.\r\n      function top(k, top_offset) {\r\n        var array = [],\r\n            i = hi0,\r\n            j,\r\n            toSkip = 0;\r\n\r\n        if(top_offset && top_offset > 0) toSkip = top_offset;\r\n\r\n        while (--i >= lo0 && k > 0) {\r\n          if (filters.zero(j = index[i])) {\r\n            if(toSkip > 0) {\r\n              //skip matching row\r\n              --toSkip;\r\n            } else {\r\n              array.push(data[j]);\r\n              --k;\r\n            }\r\n          }\r\n        }\r\n\r\n        if(iterable){\r\n          for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\r\n            // Add row with empty iterable column at the end\r\n            if(filters.zero(j = iterablesEmptyRows[i])) {\r\n              if(toSkip > 0) {\r\n                //skip matching row\r\n                --toSkip;\r\n              } else {\r\n                array.push(data[j]);\r\n                --k;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return array;\r\n      }\r\n\r\n      // Returns the bottom K selected records based on this dimension's order.\r\n      // Note: observes this dimension's filter, unlike group and groupAll.\r\n      function bottom(k, bottom_offset) {\r\n        var array = [],\r\n            i,\r\n            j,\r\n            toSkip = 0;\r\n\r\n        if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\r\n\r\n        if(iterable) {\r\n          // Add row with empty iterable column at the top\r\n          for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\r\n            if(filters.zero(j = iterablesEmptyRows[i])) {\r\n              if(toSkip > 0) {\r\n                //skip matching row\r\n                --toSkip;\r\n              } else {\r\n                array.push(data[j]);\r\n                --k;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        i = lo0;\r\n\r\n        while (i < hi0 && k > 0) {\r\n          if (filters.zero(j = index[i])) {\r\n            if(toSkip > 0) {\r\n              //skip matching row\r\n              --toSkip;\r\n            } else {\r\n              array.push(data[j]);\r\n              --k;\r\n            }\r\n          }\r\n          i++;\r\n        }\r\n\r\n        return array;\r\n      }\r\n\r\n      // Adds a new group to this dimension, using the specified key function.\r\n      function group(key) {\r\n        var group = {\r\n          top: top,\r\n          all: all,\r\n          reduce: reduce,\r\n          reduceCount: reduceCount,\r\n          reduceSum: reduceSum,\r\n          order: order,\r\n          orderNatural: orderNatural,\r\n          size: size,\r\n          dispose: dispose,\r\n          remove: dispose // for backwards-compatibility\r\n        };\r\n\r\n        // Ensure that this group will be removed when the dimension is removed.\r\n        dimensionGroups.push(group);\r\n\r\n        var groups, // array of {key, value}\r\n            groupIndex, // object id ↦ group id\r\n            groupWidth = 8,\r\n            groupCapacity = capacity(groupWidth),\r\n            k = 0, // cardinality\r\n            select,\r\n            heap,\r\n            reduceAdd,\r\n            reduceRemove,\r\n            reduceInitial,\r\n            update = cr_null,\r\n            reset = cr_null,\r\n            resetNeeded = true,\r\n            groupAll = key === cr_null,\r\n            n0old;\r\n\r\n        if (arguments.length < 1) key = cr_identity;\r\n\r\n        // The group listens to the crossfilter for when any dimension changes, so\r\n        // that it can update the associated reduce values. It must also listen to\r\n        // the parent dimension for when data is added, and compute new keys.\r\n        filterListeners.push(update);\r\n        indexListeners.push(add);\r\n        removeDataListeners.push(removeData);\r\n\r\n        // Incorporate any existing data into the grouping.\r\n        add(values, index, 0, n);\r\n\r\n        // Incorporates the specified new values into this group.\r\n        // This function is responsible for updating groups and groupIndex.\r\n        function add(newValues, newIndex, n0, n1) {\r\n\r\n          if(iterable) {\r\n            n0old = n0;\r\n            n0 = values.length - newValues.length;\r\n            n1 = newValues.length;\r\n          }\r\n\r\n          var oldGroups = groups,\r\n              reIndex = iterable ? [] : cr_index(k, groupCapacity),\r\n              add = reduceAdd,\r\n              remove = reduceRemove,\r\n              initial = reduceInitial,\r\n              k0 = k, // old cardinality\r\n              i0 = 0, // index of old group\r\n              i1 = 0, // index of new record\r\n              j, // object id\r\n              g0, // old group\r\n              x0, // old key\r\n              x1, // new key\r\n              g, // group to add\r\n              x; // key of group to add\r\n\r\n          // If a reset is needed, we don't need to update the reduce values.\r\n          if (resetNeeded) add = initial = cr_null;\r\n          if (resetNeeded) remove = initial = cr_null;\r\n\r\n          // Reset the new groups (k is a lower bound).\r\n          // Also, make sure that groupIndex exists and is long enough.\r\n          groups = new Array(k), k = 0;\r\n          if(iterable){\r\n            groupIndex = k0 ? groupIndex : [];\r\n          }\r\n          else {\r\n            groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : cr_index(n, groupCapacity);\r\n          }\r\n\r\n\r\n          // Get the first old key (x0 of g0), if it exists.\r\n          if (k0) x0 = (g0 = oldGroups[0]).key;\r\n\r\n          // Find the first new key (x1), skipping NaN keys.\r\n          while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\r\n\r\n          // While new keys remain…\r\n          while (i1 < n1) {\r\n\r\n            // Determine the lesser of the two current keys; new and old.\r\n            // If there are no old keys remaining, then always add the new key.\r\n            if (g0 && x0 <= x1) {\r\n              g = g0, x = x0;\r\n\r\n              // Record the new index of the old group.\r\n              reIndex[i0] = k;\r\n\r\n              // Retrieve the next old key.\r\n              g0 = oldGroups[++i0];\r\n              if (g0) x0 = g0.key;\r\n            } else {\r\n              g = {key: x1, value: initial()}, x = x1;\r\n            }\r\n\r\n            // Add the lesser group.\r\n            groups[k] = g;\r\n\r\n            // Add any selected records belonging to the added group, while\r\n            // advancing the new key and populating the associated group index.\r\n\r\n            while (x1 <= x) {\r\n              j = newIndex[i1] + (iterable ? n0old : n0);\r\n\r\n\r\n              if(iterable){\r\n                if(groupIndex[j]){\r\n                  groupIndex[j].push(k);\r\n                }\r\n                else {\r\n                  groupIndex[j] = [k];\r\n                }\r\n              }\r\n              else {\r\n                groupIndex[j] = k;\r\n              }\r\n\r\n              // Always add new values to groups. Only remove when not in filter.\r\n              // This gives groups full information on data life-cycle.\r\n              g.value = add(g.value, data[j], true);\r\n              if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\r\n              if (++i1 >= n1) break;\r\n              x1 = key(newValues[i1]);\r\n            }\r\n\r\n            groupIncrement();\r\n          }\r\n\r\n          // Add any remaining old groups that were greater th1an all new keys.\r\n          // No incremental reduce is needed; these groups have no new records.\r\n          // Also record the new index of the old group.\r\n          while (i0 < k0) {\r\n            groups[reIndex[i0] = k] = oldGroups[i0++];\r\n            groupIncrement();\r\n          }\r\n\r\n\r\n          // Fill in gaps with empty arrays where there may have been rows with empty iterables\r\n          if(iterable){\r\n            for (var index1 = 0; index1 < n; index1++) {\r\n              if(!groupIndex[index1]){\r\n                groupIndex[index1] = [];\r\n              }\r\n            }\r\n          }\r\n\r\n          // If we added any new groups before any old groups,\r\n          // update the group index of all the old records.\r\n          if(k > i0){\r\n            if(iterable){\r\n              for (i0 = 0; i0 < n0old; ++i0) {\r\n                for (index1 = 0; index1 < groupIndex[i0].length; index1++) {\r\n                  groupIndex[i0][index1] = reIndex[groupIndex[i0][index1]];\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              for (i0 = 0; i0 < n0; ++i0) {\r\n                groupIndex[i0] = reIndex[groupIndex[i0]];\r\n              }\r\n            }\r\n          }\r\n\r\n          // Modify the update and reset behavior based on the cardinality.\r\n          // If the cardinality is less than or equal to one, then the groupIndex\r\n          // is not needed. If the cardinality is zero, then there are no records\r\n          // and therefore no groups to update or reset. Note that we also must\r\n          // change the registered listener to point to the new method.\r\n          j = filterListeners.indexOf(update);\r\n          if (k > 1 || iterable) {\r\n            update = updateMany;\r\n            reset = resetMany;\r\n          } else {\r\n            if (!k && groupAll) {\r\n              k = 1;\r\n              groups = [{key: null, value: initial()}];\r\n            }\r\n            if (k === 1) {\r\n              update = updateOne;\r\n              reset = resetOne;\r\n            } else {\r\n              update = cr_null;\r\n              reset = cr_null;\r\n            }\r\n            groupIndex = null;\r\n          }\r\n          filterListeners[j] = update;\r\n\r\n          // Count the number of added groups,\r\n          // and widen the group index as needed.\r\n          function groupIncrement() {\r\n            if(iterable){\r\n              k++;\r\n              return\r\n            }\r\n            if (++k === groupCapacity) {\r\n              reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\r\n              groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\r\n              groupCapacity = capacity(groupWidth);\r\n            }\r\n          }\r\n        }\r\n\r\n        function removeData(reIndex) {\r\n          if (k > 1 || iterable) {\r\n            var oldK = k,\r\n                oldGroups = groups,\r\n                seenGroups = cr_index(oldK, oldK),\r\n                i,\r\n                i0,\r\n                j;\r\n\r\n            // Filter out non-matches by copying matching group index entries to\r\n            // the beginning of the array.\r\n            if (!iterable) {\r\n              for (i = 0, j = 0; i < n; ++i) {\r\n                if (reIndex[i] !== REMOVED_INDEX) {\r\n                  seenGroups[groupIndex[j] = groupIndex[i]] = 1;\r\n                  ++j;\r\n                }\r\n              }\r\n            } else {\r\n              for (i = 0, j = 0; i < n; ++i) {\r\n                if (reIndex[i] !== REMOVED_INDEX) {\r\n                  groupIndex[j] = groupIndex[i];\r\n                  for (i0 = 0; i0 < groupIndex[j].length; i0++) {\r\n                    seenGroups[groupIndex[j][i0]] = 1;\r\n                  }\r\n                  ++j;\r\n                }\r\n              }\r\n              groupIndex = groupIndex.slice(0, j);\r\n            }\r\n\r\n            // Reassemble groups including only those groups that were referred\r\n            // to by matching group index entries.  Note the new group index in\r\n            // seenGroups.\r\n            groups = [], k = 0;\r\n            for (i = 0; i < oldK; ++i) {\r\n              if (seenGroups[i]) {\r\n                seenGroups[i] = k++;\r\n                groups.push(oldGroups[i]);\r\n              }\r\n            }\r\n\r\n            if (k > 1 || iterable) {\r\n              // Reindex the group index using seenGroups to find the new index.\r\n              if (!iterable) {\r\n                for (i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\r\n              } else {\r\n                for (i = 0; i < j; ++i) {\r\n                  for (i0 = 0; i0 < groupIndex[i].length; ++i0) {\r\n                    groupIndex[i][i0] = seenGroups[groupIndex[i][i0]];\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              groupIndex = null;\r\n            }\r\n            filterListeners[filterListeners.indexOf(update)] = k > 1 || iterable\r\n                ? (reset = resetMany, update = updateMany)\r\n                : k === 1 ? (reset = resetOne, update = updateOne)\r\n                : reset = update = cr_null;\r\n          } else if (k === 1) {\r\n            if (groupAll) return;\r\n            for (var index3 = 0; index3 < n; ++index3) if (reIndex[index3] !== REMOVED_INDEX) return;\r\n            groups = [], k = 0;\r\n            filterListeners[filterListeners.indexOf(update)] =\r\n            update = reset = cr_null;\r\n          }\r\n        }\r\n\r\n        // Reduces the specified selected or deselected records.\r\n        // This function is only used when the cardinality is greater than 1.\r\n        // notFilter indicates a crossfilter.add/remove operation.\r\n        function updateMany(filterOne, filterOffset, added, removed, notFilter) {\r\n\r\n          if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\r\n\r\n          var i,\r\n              j,\r\n              k,\r\n              n,\r\n              g;\r\n\r\n          if(iterable){\r\n            // Add the added values.\r\n            for (i = 0, n = added.length; i < n; ++i) {\r\n              if (filters.zeroExcept(k = added[i], offset, zero)) {\r\n                for (j = 0; j < groupIndex[k].length; j++) {\r\n                  g = groups[groupIndex[k][j]];\r\n                  g.value = reduceAdd(g.value, data[k], false, j);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Remove the removed values.\r\n            for (i = 0, n = removed.length; i < n; ++i) {\r\n              if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\r\n                for (j = 0; j < groupIndex[k].length; j++) {\r\n                  g = groups[groupIndex[k][j]];\r\n                  g.value = reduceRemove(g.value, data[k], notFilter, j);\r\n                }\r\n              }\r\n            }\r\n            return;\r\n          }\r\n\r\n          // Add the added values.\r\n          for (i = 0, n = added.length; i < n; ++i) {\r\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\r\n              g = groups[groupIndex[k]];\r\n              g.value = reduceAdd(g.value, data[k], false);\r\n            }\r\n          }\r\n\r\n          // Remove the removed values.\r\n          for (i = 0, n = removed.length; i < n; ++i) {\r\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\r\n              g = groups[groupIndex[k]];\r\n              g.value = reduceRemove(g.value, data[k], notFilter);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Reduces the specified selected or deselected records.\r\n        // This function is only used when the cardinality is 1.\r\n        // notFilter indicates a crossfilter.add/remove operation.\r\n        function updateOne(filterOne, filterOffset, added, removed, notFilter) {\r\n          if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\r\n\r\n          var i,\r\n              k,\r\n              n,\r\n              g = groups[0];\r\n\r\n          // Add the added values.\r\n          for (i = 0, n = added.length; i < n; ++i) {\r\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\r\n              g.value = reduceAdd(g.value, data[k], false);\r\n            }\r\n          }\r\n\r\n          // Remove the removed values.\r\n          for (i = 0, n = removed.length; i < n; ++i) {\r\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\r\n              g.value = reduceRemove(g.value, data[k], notFilter);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Recomputes the group reduce values from scratch.\r\n        // This function is only used when the cardinality is greater than 1.\r\n        function resetMany() {\r\n          var i,\r\n              j,\r\n              g;\r\n\r\n          // Reset all group values.\r\n          for (i = 0; i < k; ++i) {\r\n            groups[i].value = reduceInitial();\r\n          }\r\n\r\n          // We add all records and then remove filtered records so that reducers\r\n          // can build an 'unfiltered' view even if there are already filters in\r\n          // place on other dimensions.\r\n          if(iterable){\r\n            for (i = 0; i < n; ++i) {\r\n              for (j = 0; j < groupIndex[i].length; j++) {\r\n                g = groups[groupIndex[i][j]];\r\n                g.value = reduceAdd(g.value, data[i], true, j);\r\n              }\r\n            }\r\n            for (i = 0; i < n; ++i) {\r\n              if (!filters.zeroExcept(i, offset, zero)) {\r\n                for (j = 0; j < groupIndex[i].length; j++) {\r\n                  g = groups[groupIndex[i][j]];\r\n                  g.value = reduceRemove(g.value, data[i], false, j);\r\n                }\r\n              }\r\n            }\r\n            return;\r\n          }\r\n\r\n          for (i = 0; i < n; ++i) {\r\n            g = groups[groupIndex[i]];\r\n            g.value = reduceAdd(g.value, data[i], true);\r\n          }\r\n          for (i = 0; i < n; ++i) {\r\n            if (!filters.zeroExcept(i, offset, zero)) {\r\n              g = groups[groupIndex[i]];\r\n              g.value = reduceRemove(g.value, data[i], false);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Recomputes the group reduce values from scratch.\r\n        // This function is only used when the cardinality is 1.\r\n        function resetOne() {\r\n          var i,\r\n              g = groups[0];\r\n\r\n          // Reset the singleton group values.\r\n          g.value = reduceInitial();\r\n\r\n          // We add all records and then remove filtered records so that reducers\r\n          // can build an 'unfiltered' view even if there are already filters in\r\n          // place on other dimensions.\r\n          for (i = 0; i < n; ++i) {\r\n            g.value = reduceAdd(g.value, data[i], true);\r\n          }\r\n\r\n          for (i = 0; i < n; ++i) {\r\n            if (!filters.zeroExcept(i, offset, zero)) {\r\n              g.value = reduceRemove(g.value, data[i], false);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Returns the array of group values, in the dimension's natural order.\r\n        function all() {\r\n          if (resetNeeded) reset(), resetNeeded = false;\r\n          return groups;\r\n        }\r\n\r\n        // Returns a new array containing the top K group values, in reduce order.\r\n        function top(k) {\r\n          var top = select(all(), 0, groups.length, k);\r\n          return heap.sort(top, 0, top.length);\r\n        }\r\n\r\n        // Sets the reduce behavior for this group to use the specified functions.\r\n        // This method lazily recomputes the reduce values, waiting until needed.\r\n        function reduce(add, remove, initial) {\r\n          reduceAdd = add;\r\n          reduceRemove = remove;\r\n          reduceInitial = initial;\r\n          resetNeeded = true;\r\n          return group;\r\n        }\r\n\r\n        // A convenience method for reducing by count.\r\n        function reduceCount() {\r\n          return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, cr_zero);\r\n        }\r\n\r\n        // A convenience method for reducing by sum(value).\r\n        function reduceSum(value) {\r\n          return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), cr_zero);\r\n        }\r\n\r\n        // Sets the reduce order, using the specified accessor.\r\n        function order(value) {\r\n          select = h$1.by(valueOf);\r\n          heap = h.by(valueOf);\r\n          function valueOf(d) { return value(d.value); }\r\n          return group;\r\n        }\r\n\r\n        // A convenience method for natural ordering by reduce value.\r\n        function orderNatural() {\r\n          return order(cr_identity);\r\n        }\r\n\r\n        // Returns the cardinality of this group, irrespective of any filters.\r\n        function size() {\r\n          return k;\r\n        }\r\n\r\n        // Removes this group and associated event listeners.\r\n        function dispose() {\r\n          var i = filterListeners.indexOf(update);\r\n          if (i >= 0) filterListeners.splice(i, 1);\r\n          i = indexListeners.indexOf(add);\r\n          if (i >= 0) indexListeners.splice(i, 1);\r\n          i = removeDataListeners.indexOf(removeData);\r\n          if (i >= 0) removeDataListeners.splice(i, 1);\r\n          i = dimensionGroups.indexOf(group);\r\n          if (i >= 0) dimensionGroups.splice(i, 1);\r\n          return group;\r\n        }\r\n\r\n        return reduceCount().orderNatural();\r\n      }\r\n\r\n      // A convenience function for generating a singleton group.\r\n      function groupAll() {\r\n        var g = group(cr_null), all = g.all;\r\n        delete g.all;\r\n        delete g.top;\r\n        delete g.order;\r\n        delete g.orderNatural;\r\n        delete g.size;\r\n        g.value = function() { return all()[0].value; };\r\n        return g;\r\n      }\r\n\r\n      // Removes this dimension and associated groups and event listeners.\r\n      function dispose() {\r\n        dimensionGroups.forEach(function(group) { group.dispose(); });\r\n        var i = dataListeners.indexOf(preAdd);\r\n        if (i >= 0) dataListeners.splice(i, 1);\r\n        i = dataListeners.indexOf(postAdd);\r\n        if (i >= 0) dataListeners.splice(i, 1);\r\n        i = removeDataListeners.indexOf(removeData);\r\n        if (i >= 0) removeDataListeners.splice(i, 1);\r\n        filters.masks[offset] &= zero;\r\n        return filterAll();\r\n      }\r\n\r\n      return dimension;\r\n    }\r\n\r\n    // A convenience method for groupAll on a dummy dimension.\r\n    // This implementation can be optimized since it always has cardinality 1.\r\n    function groupAll() {\r\n      var group = {\r\n        reduce: reduce,\r\n        reduceCount: reduceCount,\r\n        reduceSum: reduceSum,\r\n        value: value,\r\n        dispose: dispose,\r\n        remove: dispose // for backwards-compatibility\r\n      };\r\n\r\n      var reduceValue,\r\n          reduceAdd,\r\n          reduceRemove,\r\n          reduceInitial,\r\n          resetNeeded = true;\r\n\r\n      // The group listens to the crossfilter for when any dimension changes, so\r\n      // that it can update the reduce value. It must also listen to the parent\r\n      // dimension for when data is added.\r\n      filterListeners.push(update);\r\n      dataListeners.push(add);\r\n\r\n      // For consistency; actually a no-op since resetNeeded is true.\r\n      add(data, 0);\r\n\r\n      // Incorporates the specified new values into this group.\r\n      function add(newData, n0) {\r\n        var i;\r\n\r\n        if (resetNeeded) return;\r\n\r\n        // Cycle through all the values.\r\n        for (i = n0; i < n; ++i) {\r\n\r\n          // Add all values all the time.\r\n          reduceValue = reduceAdd(reduceValue, data[i], true);\r\n\r\n          // Remove the value if filtered.\r\n          if (!filters.zero(i)) {\r\n            reduceValue = reduceRemove(reduceValue, data[i], false);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Reduces the specified selected or deselected records.\r\n      function update(filterOne, filterOffset, added, removed, notFilter) {\r\n        var i,\r\n            k,\r\n            n;\r\n\r\n        if (resetNeeded) return;\r\n\r\n        // Add the added values.\r\n        for (i = 0, n = added.length; i < n; ++i) {\r\n          if (filters.zero(k = added[i])) {\r\n            reduceValue = reduceAdd(reduceValue, data[k], notFilter);\r\n          }\r\n        }\r\n\r\n        // Remove the removed values.\r\n        for (i = 0, n = removed.length; i < n; ++i) {\r\n          if (filters.only(k = removed[i], filterOffset, filterOne)) {\r\n            reduceValue = reduceRemove(reduceValue, data[k], notFilter);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Recomputes the group reduce value from scratch.\r\n      function reset() {\r\n        var i;\r\n\r\n        reduceValue = reduceInitial();\r\n\r\n        // Cycle through all the values.\r\n        for (i = 0; i < n; ++i) {\r\n\r\n          // Add all values all the time.\r\n          reduceValue = reduceAdd(reduceValue, data[i], true);\r\n\r\n          // Remove the value if it is filtered.\r\n          if (!filters.zero(i)) {\r\n            reduceValue = reduceRemove(reduceValue, data[i], false);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Sets the reduce behavior for this group to use the specified functions.\r\n      // This method lazily recomputes the reduce value, waiting until needed.\r\n      function reduce(add, remove, initial) {\r\n        reduceAdd = add;\r\n        reduceRemove = remove;\r\n        reduceInitial = initial;\r\n        resetNeeded = true;\r\n        return group;\r\n      }\r\n\r\n      // A convenience method for reducing by count.\r\n      function reduceCount() {\r\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, cr_zero);\r\n      }\r\n\r\n      // A convenience method for reducing by sum(value).\r\n      function reduceSum(value) {\r\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), cr_zero);\r\n      }\r\n\r\n      // Returns the computed reduce value.\r\n      function value() {\r\n        if (resetNeeded) reset(), resetNeeded = false;\r\n        return reduceValue;\r\n      }\r\n\r\n      // Removes this group and associated event listeners.\r\n      function dispose() {\r\n        var i = filterListeners.indexOf(update);\r\n        if (i >= 0) filterListeners.splice(i, 1);\r\n        i = dataListeners.indexOf(add);\r\n        if (i >= 0) dataListeners.splice(i, 1);\r\n        return group;\r\n      }\r\n\r\n      return reduceCount();\r\n    }\r\n\r\n    // Returns the number of records in this crossfilter, irrespective of any filters.\r\n    function size() {\r\n      return n;\r\n    }\r\n\r\n    // Returns the raw row data contained in this crossfilter\r\n    function all(){\r\n      return data;\r\n    }\r\n\r\n    // Returns row data with all dimension filters applied, except for filters in ignore_dimensions\r\n    function allFiltered(ignore_dimensions) {\r\n      var array = [],\r\n          i = 0,\r\n          mask = maskForDimensions(ignore_dimensions || []);\r\n\r\n        for (i = 0; i < n; i++) {\r\n          if (filters.zeroExceptMask(i, mask)) {\r\n            array.push(data[i]);\r\n          }\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    function onChange(cb){\r\n      if(typeof cb !== 'function'){\r\n        /* eslint no-console: 0 */\r\n        console.warn('onChange callback parameter must be a function!');\r\n        return;\r\n      }\r\n      callbacks.push(cb);\r\n      return function(){\r\n        callbacks.splice(callbacks.indexOf(cb), 1);\r\n      };\r\n    }\r\n\r\n    function triggerOnChange(eventName){\r\n      for (var i = 0; i < callbacks.length; i++) {\r\n        callbacks[i](eventName);\r\n      }\r\n    }\r\n\r\n    return arguments.length\r\n        ? add(arguments[0])\r\n        : crossfilter;\r\n  }\r\n\r\n  // Returns an array of size n, big enough to store ids up to m.\r\n  function cr_index(n, m) {\r\n    return (m < 0x101\r\n        ? xfilterArray.array8 : m < 0x10001\r\n        ? xfilterArray.array16\r\n        : xfilterArray.array32)(n);\r\n  }\r\n\r\n  // Constructs a new array of size n, with sequential values from 0 to n - 1.\r\n  function cr_range(n) {\r\n    var range = cr_index(n, n);\r\n    for (var i = -1; ++i < n;) range[i] = i;\r\n    return range;\r\n  }\r\n\r\n  function capacity(w) {\r\n    return w === 8\r\n        ? 0x100 : w === 16\r\n        ? 0x10000\r\n        : 0x100000000;\r\n  }\r\n\r\n  var version = \"1.5.4\";\r\n\r\n  // Note(cg): exporting current version for umd build.\r\n  crossfilter.version = version;\r\n\r\n  return crossfilter;\r\n\r\n})));"]}