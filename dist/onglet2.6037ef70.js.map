{"version":3,"sources":["scripts/onglet2.js"],"names":["ROW_CHART_HEIGHT","ROW_CHART_HEIGHT_MARGIN","d3","csv","then","stackData","data1","data2","data3","dataTypes","data","concat","dataVesselTypes","Map","dataVesselTypesArray","map","d","vesselClass","Class","vesselType","Type","entry","set","i","get","index","departureDate","timeParse","departurePort","arrivalDate","arrivalPort","vesselLength","vesselWidth","vesselCapacity","vesselDraught","chartWidth","chartHeight","chartNbBars","ndx","crossfilter","vesselLengthRange","vesselLengthBarWidth","dimension","vesselLengths","group","Math","floor","vesselLengthChart","dc","BarChart","width","height","margins","top","right","bottom","left","x","scaleLinear","domain","xUnits","brushOn","xAxisLabel","elasticY","yAxis","ticks","render","vesselWidthRange","vesselWidthBarWidth","vesselWidths","vesselWidthChart","vesselCapacityRange","vesselCapacityBarWidth","vesselCapacities","vesselCapacityChart","vesselDraughtRange","vesselDraughtBarWidth","vesselDraughts","vesselDraughtChart","vesselTypes","typeColorScale","scaleOrdinal","schemeSet2","vesselTypeClasses","vesselTypeChart","PieChart","cy","innerRadius","colors","minAngleForLabel","legend","y","filter","vesselTraffic","vesselTraffics","timeMonth","minDate","maxDate","vesselTrafficChart","round","scaleTime","rangeRound","portDim","includes","portTraffic","reduceCount","filteredGroup","remove_empty_bins","portChart","RowChart","value","xAxis","axisTop","othersGrouper","elasticX","label","key","fixedBarHeight","on","select","attr","selectAll","effectiveHeight","count","all","length","source_group"],"mappings":"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","file":"onglet2.6037ef70.js","sourceRoot":"..","sourcesContent":["const ROW_CHART_HEIGHT = 16.68\r\nconst ROW_CHART_HEIGHT_MARGIN = 21.75\r\n\r\n// Reading the data\r\nd3.csv('./TRIP_STACK_HALF_MONTH.csv').then(function(stackData) {\r\n    d3.csv(\"./TRIP_PART_1.csv\").then( function(data1) {\r\n        d3.csv(\"./TRIP_PART_2.csv\").then( function(data2) {\r\n            d3.csv(\"./TRIP_PART_3.csv\").then( function(data3) {\r\n                d3.csv(\"./Vessel Type Class.csv\").then(function(dataTypes) {\r\n                    // Id,Departure Date,Departure Hardour,Departure Region,Departure Latitude,Departure Longitude,Arrival Date,Arrival Hardour,Arrival Region,Arrival Latitude,Arrival Longitude,Vessel Type,Lenght,Width,DeadWeight Tonnage,Maximum Draugth\r\n                    // 6079000000783579,    2011-01-01 00:00:00.000,Virtual Harbour (Central Region),Central Region,45.71666667,-84.24861111,2011-01-01 15:30:00.000,Goderich,Central Region,43.745,-81.7294441666667,Merchant Bulk,222.509994506836,22.9400005340576,31751,8.72999954223633\r\n                    // 23079000000766048,   2011-01-01 00:10:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,2011-01-01 01:00:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,Tug Fire,38.9000015258789,13.8999996185303,314,3.5\r\n                    // 23079000000766035,   2011-01-01 00:57:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,2011-01-02 12:45:00.000,Virtual Harbour (Newfoundland Region),Newfoundland Region,47.75,-53,Merchant Crude,271.799987792969,46.0499992370606,126646,15.3459997177124\r\n        \r\n                    let data = data1.concat(data2).concat(data3)\r\n    \r\n                    let dataVesselTypes = new Map()\r\n    \r\n                    const dataVesselTypesArray = dataTypes.map((d) => {\r\n                        return {\r\n                            vesselClass: d.Class,\r\n                            vesselType: d.Type\r\n                        }\r\n                    })\r\n    \r\n                    for (const entry of dataVesselTypesArray) {\r\n                        const vesselClass = entry.vesselClass\r\n                        const vesselType = entry.vesselType\r\n                        dataVesselTypes.set(vesselType, vesselClass)\r\n                    }\r\n                    \r\n                    data = data.map((d, i) => {\r\n                        const vesselType = d['Vessel Type']\r\n                        let vesselClass = dataVesselTypes.get(d['Vessel Type'])\r\n                        if (vesselType == '<Unknown Type>') {\r\n                            vesselClass = 'Other'\r\n                        }\r\n                        return {\r\n                            index: i,\r\n                            departureDate: d3.timeParse('%Y-%m-%d')(d['Departure Date']),\r\n                            departurePort: d['Departure Hardour'],\r\n                            arrivalDate: d3.timeParse('%Y-%m-%d')(d['Arrival Date']),\r\n                            arrivalPort: d['Arrival Hardour'],\r\n                            vesselClass: vesselClass,\r\n                            vesselType: d['Vessel Type'],\r\n                            vesselLength: +d['Lenght'],\r\n                            vesselWidth: +d['Width'],\r\n                            vesselCapacity: +d['DeadWeight Tonnage'],\r\n                            vesselDraught: +d['Maximum Draugth']\r\n                        }\r\n                    })\r\n    \r\n                    const chartWidth = 776\r\n                    const chartHeight = 160\r\n                    const chartNbBars = 50\r\n    \r\n                    const ndx = crossfilter(data)\r\n    \r\n                    const vesselLengthRange = 400\r\n                    const vesselLengthBarWidth = vesselLengthRange / chartNbBars\r\n                    const vesselLength = ndx.dimension(d => d.vesselLength)\r\n                    const vesselLengths = vesselLength.group(d => Math.floor(d / vesselLengthBarWidth) * vesselLengthBarWidth)\r\n    \r\n                    const vesselLengthChart = new dc.BarChart('#length-chart')\r\n                    .width(chartWidth)\r\n                    .height(chartHeight)\r\n                    .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                    .x(d3.scaleLinear()\r\n                        .domain([0, vesselLengthRange]))\r\n                    .xUnits(() => chartNbBars)\r\n                    .brushOn(false)\r\n                    .xAxisLabel(\"Longueur\")\r\n                    .elasticY(true)\r\n                    .dimension(vesselLength)\r\n                    .group(vesselLengths)\r\n                    \r\n                    vesselLengthChart.yAxis().ticks(8)\r\n    \r\n                    vesselLengthChart.render()\r\n    \r\n                    const vesselWidthRange = 180\r\n                    const vesselWidthBarWidth = vesselWidthRange / chartNbBars\r\n                    const vesselWidth = ndx.dimension(d => d.vesselWidth)\r\n                    const vesselWidths = vesselWidth.group(d => Math.floor(d / vesselWidthBarWidth) * vesselWidthBarWidth)\r\n    \r\n                    const vesselWidthChart = new dc.BarChart('#width-chart')\r\n                    .width(chartWidth)\r\n                    .height(chartHeight)\r\n                    .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                    .x(d3.scaleLinear()\r\n                        .domain([0, vesselWidthRange]))\r\n                    .xUnits(() => chartNbBars)\r\n                    .brushOn(false)\r\n                    .xAxisLabel(\"Largeur\")\r\n                    .elasticY(true)\r\n                    .dimension(vesselWidth)\r\n                    .group(vesselWidths)\r\n    \r\n                    vesselWidthChart.yAxis().ticks(7)\r\n    \r\n                    vesselWidthChart.render()\r\n    \r\n                    const vesselCapacityRange = 650000\r\n                    const vesselCapacityBarWidth = vesselCapacityRange / chartNbBars\r\n                    const vesselCapacity = ndx.dimension(d => d.vesselCapacity)\r\n                    const vesselCapacities = vesselCapacity.group(d => Math.floor(d / vesselCapacityBarWidth) * vesselCapacityBarWidth)\r\n    \r\n                    const vesselCapacityChart = new dc.BarChart('#capacity-chart')\r\n                    .width(chartWidth)\r\n                    .height(chartHeight)\r\n                    .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                    .x(d3.scaleLinear()\r\n                        .domain([0, vesselCapacityRange]))\r\n                    .xUnits(() => chartNbBars)\r\n                    .brushOn(false)\r\n                    .xAxisLabel(\"Capacité\")\r\n                    .elasticY(true)\r\n                    .dimension(vesselCapacity)\r\n                    .group(vesselCapacities)\r\n                    \r\n                    vesselCapacityChart.yAxis().ticks(9)\r\n    \r\n                    vesselCapacityChart.render()\r\n    \r\n                    const vesselDraughtRange = 30\r\n                    const vesselDraughtBarWidth = vesselDraughtRange / chartNbBars\r\n                    const vesselDraught = ndx.dimension(d => d.vesselDraught)\r\n                    const vesselDraughts = vesselDraught.group(d => Math.floor(d / vesselDraughtBarWidth) * vesselDraughtBarWidth)\r\n    \r\n                    const vesselDraughtChart = new dc.BarChart('#draught-chart')\r\n                    .width(chartWidth)\r\n                    .height(chartHeight)\r\n                    .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                    .x(d3.scaleLinear()\r\n                        .domain([0, vesselDraughtRange]))\r\n                    .xUnits(() => chartNbBars)\r\n                    .brushOn(false)\r\n                    .xAxisLabel(\"Tirant d'eau\")\r\n                    .elasticY(true)\r\n                    .dimension(vesselDraught)\r\n                    .group(vesselDraughts)\r\n                    \r\n                    vesselDraughtChart.yAxis().ticks(6)\r\n    \r\n                    vesselDraughtChart.render()\r\n    \r\n                    const vesselType = ndx.dimension(d => d.vesselClass)\r\n                    const vesselTypes = vesselType.group()\r\n    \r\n                    const typeColorScale = d3.scaleOrdinal(d3.schemeSet2).domain(vesselTypeClasses())\r\n    \r\n                    const vesselTypeChart = new dc.PieChart(\"#type-chart\")\r\n                    .width(150)\r\n                    .height(310)\r\n                    .cy(75)\r\n                    .innerRadius(50)\r\n                    .dimension(vesselTypes)\r\n                    .group(vesselTypes)\r\n                    .colors(typeColorScale)\r\n                    .minAngleForLabel(360)\r\n                    .legend(dc.legend().y(160))\r\n    \r\n                    vesselTypeChart.filter = function() {};\r\n    \r\n                    vesselTypeChart.render()\r\n    \r\n                    const vesselTraffic = ndx.dimension(d => d.departureDate)\r\n                    const vesselTraffics = vesselTraffic.group(d3.timeMonth)\r\n                    \r\n                    const minDate = vesselTraffic.bottom(1)[0].departureDate\r\n                    const maxDate = vesselTraffic.top(1)[0].departureDate\r\n    \r\n                    const vesselTrafficChart = new dc.BarChart('#tab-2-content .traffic-chart')\r\n                    .width(950)\r\n                    .height(125)\r\n                    .margins({top: 10, right: 50, bottom: 30, left: 20})\r\n                    .dimension(vesselTraffic)\r\n                    .group(vesselTraffics)\r\n                    .round(d3.timeMonth)\r\n                    .x(d3.scaleTime()\r\n                        .domain([minDate, maxDate])\r\n                        .rangeRound([0, 950]))\r\n                    .brushOn(true)\r\n                    .elasticY(true)\r\n    \r\n                    vesselTrafficChart.yAxis().ticks(5)\r\n    \r\n                    vesselTrafficChart.render()\r\n    \r\n                    const portDim = ndx.dimension(d => d.departurePort)\r\n    \r\n                    ndx.dimension(d=> d.departurePort)\r\n                    .filter(d => !d.includes('Virtual Harbour'))\r\n    \r\n                    const portTraffic = portDim.group().reduceCount()\r\n                    const filteredGroup = remove_empty_bins(portTraffic)\r\n    \r\n                    const portChart = new dc.RowChart('#port-chart')\r\n                    .width(600)\r\n                    .height(900)\r\n                    .margins({top: 30, right: 50, bottom: 30, left: 30})\r\n                    .dimension(portDim)\r\n                    .group(filteredGroup)\r\n                    .x(d3.scaleLinear()\r\n                        .domain([0, portTraffic.top(1)[0].value])\r\n                        .rangeRound([0, 500]))\r\n                    .xAxis(d3.axisTop())\r\n                    .colors(d3.scaleOrdinal(['#1f77b4']))\r\n                    .othersGrouper(false)\r\n                    .elasticX(true)\r\n                    .label(d => d.key + ': ' + d.value)\r\n                    .fixedBarHeight(ROW_CHART_HEIGHT)\r\n    \r\n                    portChart.on('pretransition', function() {\r\n                        portChart.select('g.axis').attr('transform', 'translate(0,0)')\r\n                        portChart.selectAll('line.grid-line').attr('y2', portChart.effectiveHeight())\r\n                        const count = filteredGroup.all().length\r\n                        const height = count * ROW_CHART_HEIGHT_MARGIN + 20\r\n                        portChart.select('svg').attr('height', height)\r\n                    })\r\n    \r\n                    portChart.render()\r\n                })\r\n            })\r\n        })\r\n    })\r\n})\r\n\r\n// https://github.com/dc-js/dc.js/wiki/FAQ#how-do-i-filter-the-data-before-its-charted\r\nfunction remove_empty_bins(source_group) {\r\n    return {\r\n        all:function () {\r\n            return source_group.all().filter(function(d) {\r\n                return d.value !== 0;\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nfunction vesselTypeClasses() {\r\n    return [\r\n        \"Barges\",\r\n        \"Excursion\",\r\n        \"Fishing\",\r\n        \"Merchant\",\r\n        \"Other\",\r\n        \"PleasureCrafts\",\r\n        \"Tanker\",\r\n        \"Tugs\",\r\n        \"Other\"\r\n    ]\r\n}"]}