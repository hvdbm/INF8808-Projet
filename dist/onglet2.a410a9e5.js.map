{"version":3,"sources":["scripts/onglet2.js"],"names":["ROW_CHART_HEIGHT","ROW_CHART_HEIGHT_MARGIN","d3","csv","then","data1","data2","data3","dataTypes","data","concat","dataVesselTypes","Map","dataVesselTypesArray","map","d","vesselClass","Class","vesselType","Type","entry","set","i","get","index","departureDate","timeParse","departurePort","arrivalDate","arrivalPort","vesselLength","vesselWidth","vesselCapacity","vesselDraught","chartWidth","chartHeight","chartNbBars","timeSelectWidth","ndx","crossfilter","vesselLengthRange","vesselLengthBarWidth","dimension","vesselLengths","group","Math","floor","vesselLengthChart","dc","BarChart","width","height","margins","top","right","bottom","left","x","scaleLinear","domain","xUnits","brushOn","xAxisLabel","elasticY","yAxis","ticks","render","vesselWidthRange","vesselWidthBarWidth","vesselWidths","vesselWidthChart","vesselCapacityRange","vesselCapacityBarWidth","vesselCapacities","vesselCapacityChart","vesselDraughtRange","vesselDraughtBarWidth","vesselDraughts","vesselDraughtChart","vesselTypes","typeColorScale","scaleOrdinal","schemeSet2","vesselTypeClasses","vesselTypeChart","PieChart","cy","innerRadius","colors","minAngleForLabel","legend","y","filter","vesselTraffic","vesselTraffics","timeMonth","minDate","maxDate","vesselTrafficRange","vesselTrafficBarWidth","vesselTrafficChart","round","scaleTime","rangeRound","portDim","includes","portTraffic","reduceCount","filteredGroup","remove_empty_bins","portChart","RowChart","value","xAxis","axisTop","othersGrouper","elasticX","label","key","fixedBarHeight","on","select","attr","selectAll","effectiveHeight","count","all","length","source_group"],"mappings":"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","file":"onglet2.a410a9e5.js","sourceRoot":"..","sourcesContent":["const ROW_CHART_HEIGHT = 16.68\r\nconst ROW_CHART_HEIGHT_MARGIN = 21.75\r\n\r\n// Reading the data\r\nd3.csv(\"./TRIP_Part1.csv\").then( function(data1) {\r\n    d3.csv(\"./TRIP_Part2.csv\").then( function(data2) {\r\n        d3.csv(\"./TRIP_Part3.csv\").then( function(data3) {\r\n            d3.csv(\"./Vessel Type Class.csv\").then(function(dataTypes) {\r\n                // Id,Departure Date,Departure Hardour,Departure Region,Departure Latitude,Departure Longitude,Arrival Date,Arrival Hardour,Arrival Region,Arrival Latitude,Arrival Longitude,Vessel Type,Lenght,Width,DeadWeight Tonnage,Maximum Draugth\r\n                // 6079000000783579,    2011-01-01 00:00:00.000,Virtual Harbour (Central Region),Central Region,45.71666667,-84.24861111,2011-01-01 15:30:00.000,Goderich,Central Region,43.745,-81.7294441666667,Merchant Bulk,222.509994506836,22.9400005340576,31751,8.72999954223633\r\n                // 23079000000766048,   2011-01-01 00:10:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,2011-01-01 01:00:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,Tug Fire,38.9000015258789,13.8999996185303,314,3.5\r\n                // 23079000000766035,   2011-01-01 00:57:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,2011-01-02 12:45:00.000,Virtual Harbour (Newfoundland Region),Newfoundland Region,47.75,-53,Merchant Crude,271.799987792969,46.0499992370606,126646,15.3459997177124\r\n    \r\n                let data = data1.concat(data2).concat(data3)\r\n\r\n                let dataVesselTypes = new Map()\r\n\r\n                const dataVesselTypesArray = dataTypes.map((d) => {\r\n                    return {\r\n                        vesselClass: d.Class,\r\n                        vesselType: d.Type\r\n                    }\r\n                })\r\n\r\n                for (const entry of dataVesselTypesArray) {\r\n                    const vesselClass = entry.vesselClass\r\n                    const vesselType = entry.vesselType\r\n                    dataVesselTypes.set(vesselType, vesselClass)\r\n                }\r\n                \r\n                data = data.map((d, i) => {\r\n                    const vesselType = d['Vessel Type']\r\n                    let vesselClass = dataVesselTypes.get(d['Vessel Type'])\r\n                    if (vesselType == '<Unknown Type>') {\r\n                        vesselClass = 'Other'\r\n                    }\r\n                    return {\r\n                        index: i,\r\n                        departureDate: d3.timeParse('%Y-%m-%d')(d['Departure Date']),\r\n                        departurePort: d['Departure Hardour'],\r\n                        arrivalDate: d3.timeParse('%Y-%m-%d')(d['Arrival Date']),\r\n                        arrivalPort: d['Arrival Hardour'],\r\n                        vesselClass: vesselClass,\r\n                        vesselType: d['Vessel Type'],\r\n                        vesselLength: +d['Lenght'],\r\n                        vesselWidth: +d['Width'],\r\n                        vesselCapacity: +d['DeadWeight Tonnage'],\r\n                        vesselDraught: +d['Maximum Draugth']\r\n                    }\r\n                })\r\n\r\n                const chartWidth = 776\r\n                const chartHeight = 160\r\n                const chartNbBars = 50\r\n\r\n                const timeSelectWidth = 950\r\n\r\n                const ndx = crossfilter(data)\r\n\r\n                const vesselLengthRange = 400\r\n                const vesselLengthBarWidth = vesselLengthRange / chartNbBars\r\n                const vesselLength = ndx.dimension(d => d.vesselLength)\r\n                const vesselLengths = vesselLength.group(d => Math.floor(d / vesselLengthBarWidth) * vesselLengthBarWidth)\r\n\r\n                const vesselLengthChart = new dc.BarChart('#length-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselLengthRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .xAxisLabel(\"Longueur\")\r\n                .elasticY(true)\r\n                .dimension(vesselLength)\r\n                .group(vesselLengths)\r\n                \r\n                vesselLengthChart.yAxis().ticks(8)\r\n\r\n                vesselLengthChart.render()\r\n\r\n                const vesselWidthRange = 180\r\n                const vesselWidthBarWidth = vesselWidthRange / chartNbBars\r\n                const vesselWidth = ndx.dimension(d => d.vesselWidth)\r\n                const vesselWidths = vesselWidth.group(d => Math.floor(d / vesselWidthBarWidth) * vesselWidthBarWidth)\r\n\r\n                const vesselWidthChart = new dc.BarChart('#width-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselWidthRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .xAxisLabel(\"Largeur\")\r\n                .elasticY(true)\r\n                .dimension(vesselWidth)\r\n                .group(vesselWidths)\r\n\r\n                vesselWidthChart.yAxis().ticks(7)\r\n\r\n                vesselWidthChart.render()\r\n\r\n                const vesselCapacityRange = 650000\r\n                const vesselCapacityBarWidth = vesselCapacityRange / chartNbBars\r\n                const vesselCapacity = ndx.dimension(d => d.vesselCapacity)\r\n                const vesselCapacities = vesselCapacity.group(d => Math.floor(d / vesselCapacityBarWidth) * vesselCapacityBarWidth)\r\n\r\n                const vesselCapacityChart = new dc.BarChart('#capacity-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselCapacityRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .xAxisLabel(\"Capacité\")\r\n                .elasticY(true)\r\n                .dimension(vesselCapacity)\r\n                .group(vesselCapacities)\r\n                \r\n                vesselCapacityChart.yAxis().ticks(9)\r\n\r\n                vesselCapacityChart.render()\r\n\r\n                const vesselDraughtRange = 30\r\n                const vesselDraughtBarWidth = vesselDraughtRange / chartNbBars\r\n                const vesselDraught = ndx.dimension(d => d.vesselDraught)\r\n                const vesselDraughts = vesselDraught.group(d => Math.floor(d / vesselDraughtBarWidth) * vesselDraughtBarWidth)\r\n\r\n                const vesselDraughtChart = new dc.BarChart('#draught-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselDraughtRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .xAxisLabel(\"Tirant d'eau\")\r\n                .elasticY(true)\r\n                .dimension(vesselDraught)\r\n                .group(vesselDraughts)\r\n                \r\n                vesselDraughtChart.yAxis().ticks(6)\r\n\r\n                vesselDraughtChart.render()\r\n\r\n                const vesselType = ndx.dimension(d => d.vesselClass)\r\n                const vesselTypes = vesselType.group()\r\n\r\n                const typeColorScale = d3.scaleOrdinal(d3.schemeSet2).domain(vesselTypeClasses())\r\n\r\n                const vesselTypeChart = new dc.PieChart(\"#type-chart\")\r\n                .width(150)\r\n                .height(310)\r\n                .cy(75)\r\n                .innerRadius(50)\r\n                .dimension(vesselTypes)\r\n                .group(vesselTypes)\r\n                .colors(typeColorScale)\r\n                .minAngleForLabel(360)\r\n                .legend(dc.legend().y(160))\r\n\r\n                vesselTypeChart.filter = function() {};\r\n\r\n                vesselTypeChart.render()\r\n\r\n                const vesselTraffic = ndx.dimension(d => d.departureDate)\r\n                const vesselTraffics = vesselTraffic.group(d3.timeMonth)\r\n                \r\n                const minDate = vesselTraffic.bottom(1)[0].departureDate\r\n                const maxDate = vesselTraffic.top(1)[0].departureDate\r\n\r\n                const vesselTrafficRange = maxDate - minDate\r\n                const vesselTrafficBarWidth = vesselTrafficRange / chartNbBars\r\n\r\n                const vesselTrafficChart = new dc.BarChart('#traffic-chart')\r\n                .width(timeSelectWidth)\r\n                .height(125)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .dimension(vesselTraffic)\r\n                .group(vesselTraffics)\r\n                .round(d3.timeMonth)\r\n                .x(d3.scaleTime()\r\n                    .domain([minDate, maxDate])\r\n                    .rangeRound([0, timeSelectWidth]))\r\n                .brushOn(true)\r\n                .elasticY(true)\r\n\r\n                vesselTrafficChart.yAxis().ticks(5)\r\n\r\n                vesselTrafficChart.render()\r\n\r\n                const portDim = ndx.dimension(d => d.departurePort)\r\n\r\n                ndx.dimension(d=> d.departurePort)\r\n                .filter(d => !d.includes('Virtual Harbour'))\r\n\r\n                const portTraffic = portDim.group().reduceCount()\r\n                const filteredGroup = remove_empty_bins(portTraffic)\r\n\r\n                const portChart = new dc.RowChart('#port-chart')\r\n                .width(600)\r\n                .height(900)\r\n                .margins({top: 30, right: 50, bottom: 30, left: 30})\r\n                .dimension(portDim)\r\n                .group(filteredGroup)\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, portTraffic.top(1)[0].value])\r\n                    .rangeRound([0, 500]))\r\n                .xAxis(d3.axisTop())\r\n                .colors(d3.scaleOrdinal(['#1f77b4']))\r\n                .othersGrouper(false)\r\n                .elasticX(true)\r\n                .label(d => d.key + ': ' + d.value)\r\n                .fixedBarHeight(ROW_CHART_HEIGHT)\r\n\r\n                portChart.on('pretransition', function() {\r\n                    portChart.select('g.axis').attr('transform', 'translate(0,0)')\r\n                    portChart.selectAll('line.grid-line').attr('y2', portChart.effectiveHeight())\r\n                    const count = filteredGroup.all().length\r\n                    const height = count * ROW_CHART_HEIGHT_MARGIN + 20\r\n                    portChart.select('svg').attr('height', height)\r\n                })\r\n\r\n                portChart.render()\r\n            })\r\n        })\r\n    })\r\n})\r\n\r\n// https://github.com/dc-js/dc.js/wiki/FAQ#how-do-i-filter-the-data-before-its-charted\r\nfunction remove_empty_bins(source_group) {\r\n    return {\r\n        all:function () {\r\n            return source_group.all().filter(function(d) {\r\n                return d.value !== 0;\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nfunction vesselTypeClasses() {\r\n    return [\r\n        \"Barges\",\r\n        \"Excursion\",\r\n        \"Fishing\",\r\n        \"Merchant\",\r\n        \"Other\",\r\n        \"PleasureCrafts\",\r\n        \"Tanker\",\r\n        \"Tugs\",\r\n        \"Other\"\r\n    ]\r\n}"]}