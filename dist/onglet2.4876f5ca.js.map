{"version":3,"sources":["scripts/onglet2.js"],"names":["ROW_CHART_HEIGHT","ROW_CHART_HEIGHT_MARGIN","d3","csv","then","data1","data2","data3","dataTypes","data","concat","dataVesselTypes","Map","dataVesselTypesArray","map","d","vesselClass","Class","vesselType","Type","entry","set","i","get","index","departureDate","timeParse","departurePort","arrivalDate","arrivalPort","vesselLength","vesselWidth","vesselCapacity","vesselDraught","chartWidth","chartHeight","chartNbBars","timeSelectWidth","ndx","crossfilter","vesselClassX","dimension","classes","group","all","key","typeColorScale","scaleOrdinal","schemeSet2","domain","firstClass","vesselLengthRange","vesselLengthBarWidth","vesselLengths","Math","floor","reduce","p","v","vesselLengthChart","dc","BarChart","width","height","margins","top","right","bottom","left","x","scaleLinear","xUnits","brushOn","colors","xAxisLabel","elasticY","value","type","stack","length","yAxis","ticks","render","vesselWidthRange","vesselWidthBarWidth","vesselWidths","vesselWidthChart","vesselCapacityRange","vesselCapacityBarWidth","vesselCapacities","vesselCapacityChart","vesselDraughtRange","vesselDraughtBarWidth","vesselDraughts","vesselDraughtChart","vesselTypeY","_","vesselTypesY","vesselTypeChart","legend","y","filter","vesselTraffic","vesselTraffics","timeMonth","minDate","maxDate","vesselTrafficChart","round","scaleTime","rangeRound","portDim","includes","portTraffic","reduceCount","filteredGroup","remove_empty_bins","portChart","RowChart","xAxis","axisTop","othersGrouper","elasticX","label","fixedBarHeight","on","select","attr","selectAll","effectiveHeight","count","style","SingularStackedBarChart","parent","_groupAll","_colors","_width","_height","_duration","_root","registerChart","_rect","groupAll","arguments","svg","join","redraw","transition","duration","source_group"],"mappings":"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","file":"onglet2.4876f5ca.js","sourceRoot":"..","sourcesContent":["const ROW_CHART_HEIGHT = 16.68\nconst ROW_CHART_HEIGHT_MARGIN = 21.75\n\n// Reading the data\nd3.csv(\"./TRIP_PART_1.csv\").then( function(data1) {\n    d3.csv(\"./TRIP_PART_2.csv\").then( function(data2) {\n        d3.csv(\"./TRIP_PART_3.csv\").then( function(data3) {\n            d3.csv(\"./Vessel Type Class.csv\").then(function(dataTypes) {\n                // Id,Departure Date,Departure Hardour,Departure Region,Departure Latitude,Departure Longitude,Arrival Date,Arrival Hardour,Arrival Region,Arrival Latitude,Arrival Longitude,Vessel Type,Lenght,Width,DeadWeight Tonnage,Maximum Draugth\n                // 6079000000783579,    2011-01-01 00:00:00.000,Virtual Harbour (Central Region),Central Region,45.71666667,-84.24861111,2011-01-01 15:30:00.000,Goderich,Central Region,43.745,-81.7294441666667,Merchant Bulk,222.509994506836,22.9400005340576,31751,8.72999954223633\n                // 23079000000766048,   2011-01-01 00:10:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,2011-01-01 01:00:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,Tug Fire,38.9000015258789,13.8999996185303,314,3.5\n                // 23079000000766035,   2011-01-01 00:57:00.000,Whiffen Head,Newfoundland Region,47.7727836111111,-54.0171797222222,2011-01-02 12:45:00.000,Virtual Harbour (Newfoundland Region),Newfoundland Region,47.75,-53,Merchant Crude,271.799987792969,46.0499992370606,126646,15.3459997177124\n    \n                let data = data1.concat(data2).concat(data3)\n\n                let dataVesselTypes = new Map()\n\n                const dataVesselTypesArray = dataTypes.map((d) => {\n                    return {\n                        vesselClass: d.Class,\n                        vesselType: d.Type\n                    }\n                })\n\n                for (const entry of dataVesselTypesArray) {\n                    const vesselClass = entry.vesselClass\n                    const vesselType = entry.vesselType\n                    dataVesselTypes.set(vesselType, vesselClass)\n                }\n                \n                data = data.map((d, i) => {\n                    const vesselType = d['Vessel Type']\n                    let vesselClass = dataVesselTypes.get(d['Vessel Type'])\n                    if (vesselType == '<Unknown Type>') {\n                        vesselClass = 'Other'\n                    }\n                    return {\n                        index: i,\n                        departureDate: d3.timeParse('%Y-%m-%d')(d['Departure Date']),\n                        departurePort: d['Departure Hardour'],\n                        arrivalDate: d3.timeParse('%Y-%m-%d')(d['Arrival Date']),\n                        arrivalPort: d['Arrival Hardour'],\n                        vesselClass: vesselClass,\n                        vesselType: d['Vessel Type'],\n                        vesselLength: +d['Lenght'],\n                        vesselWidth: +d['Width'],\n                        vesselCapacity: +d['DeadWeight Tonnage'],\n                        vesselDraught: +d['Maximum Draugth']\n                    }\n                })\n\n                const chartWidth = 776\n                const chartHeight = 180\n                const chartNbBars = 50\n\n                const timeSelectWidth = 950\n\n                const ndx = crossfilter(data)\n                const vesselClassX = ndx.dimension(d => d.vesselClass)\n                const classes = vesselClassX.group().all().map(d => d.key)\n\n                const typeColorScale = d3.scaleOrdinal(d3.schemeSet2).domain(classes)\n                const firstClass = classes[0]\n\n                // Longueur\n\n                const vesselLengthRange = 400\n                const vesselLengthBarWidth = vesselLengthRange / chartNbBars\n                const vesselLength = ndx.dimension(d => d.vesselLength)\n                const vesselLengths = vesselLength.group(d => Math.floor(d / vesselLengthBarWidth) * vesselLengthBarWidth).reduce(\n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1;\n                      return p;}, \n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1;\n                      return p;}, \n                    function() {\n                      return {};\n                    }\n                )\n\n                const vesselLengthChart = new dc.BarChart('#length-chart')\n                .width(chartWidth)\n                .height(chartHeight)\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\n                .x(d3.scaleLinear()\n                    .domain([0, vesselLengthRange]))\n                .xUnits(() => chartNbBars)\n                .brushOn(false)\n                .colors(typeColorScale)\n                .xAxisLabel('Longueur (m)')\n                .elasticY(true)\n                .dimension(vesselLength)\n                .group(vesselLengths, firstClass, d => d.value[firstClass])\n\n                for (let i = 1; i < classes.length; i++) {\n                    const type = classes[i]\n                    vesselLengthChart.stack(vesselLengths, type, d => d.value[type])\n                }\n                \n                vesselLengthChart.yAxis().ticks(8)\n\n                vesselLengthChart.render()\n\n                // Largeur\n\n                const vesselWidthRange = 180\n                const vesselWidthBarWidth = vesselWidthRange / chartNbBars\n                const vesselWidth = ndx.dimension(d => d.vesselWidth)\n                const vesselWidths = vesselWidth.group(d => Math.floor(d / vesselWidthBarWidth) * vesselWidthBarWidth).reduce(\n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1;\n                      return p;}, \n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1;\n                      return p;}, \n                    function() {\n                      return {};\n                    }\n                )\n\n                const vesselWidthChart = new dc.BarChart('#width-chart')\n                .width(chartWidth)\n                .height(chartHeight)\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\n                .x(d3.scaleLinear()\n                    .domain([0, vesselWidthRange]))\n                .xUnits(() => chartNbBars)\n                .brushOn(false)\n                .colors(typeColorScale)\n                .xAxisLabel('Largeur (m)')\n                .elasticY(true)\n                .dimension(vesselWidth)\n                .group(vesselWidths, firstClass, d => d.value[firstClass])\n\n                for (let i = 1; i < classes.length; i++) {\n                    const type = classes[i]\n                    vesselWidthChart.stack(vesselWidths, type, d => d.value[type])\n                }\n\n                vesselWidthChart.yAxis().ticks(7)\n\n                vesselWidthChart.render()\n\n                // Capacité\n\n                const vesselCapacityRange = 650000\n                const vesselCapacityBarWidth = vesselCapacityRange / chartNbBars\n                const vesselCapacity = ndx.dimension(d => d.vesselCapacity)\n                const vesselCapacities = vesselCapacity.group(d => Math.floor(d / vesselCapacityBarWidth) * vesselCapacityBarWidth).reduce(\n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1;\n                      return p;}, \n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1;\n                      return p;}, \n                    function() {\n                      return {};\n                    }\n                )\n\n                const vesselCapacityChart = new dc.BarChart('#capacity-chart')\n                .width(chartWidth)\n                .height(chartHeight)\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\n                .x(d3.scaleLinear()\n                    .domain([0, vesselCapacityRange]))\n                .xUnits(() => chartNbBars)\n                .brushOn(false)\n                .colors(typeColorScale)\n                .xAxisLabel('Capacité (t)')\n                .elasticY(true)\n                .dimension(vesselCapacity)\n                .group(vesselCapacities, firstClass, d => d.value[firstClass])\n\n                for (let i = 1; i < classes.length; i++) {\n                    const type = classes[i]\n                    vesselCapacityChart.stack(vesselCapacities, type, d => d.value[type])\n                }\n                \n                vesselCapacityChart.yAxis().ticks(9)\n\n                vesselCapacityChart.render()\n\n                // Tirant d'eau\n\n                const vesselDraughtRange = 30\n                const vesselDraughtBarWidth = vesselDraughtRange / chartNbBars\n                const vesselDraught = ndx.dimension(d => d.vesselDraught)\n                const vesselDraughts = vesselDraught.group(d => Math.floor(d / vesselDraughtBarWidth) * vesselDraughtBarWidth).reduce(\n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1;\n                      return p;}, \n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1;\n                      return p;}, \n                    function() {\n                      return {};\n                    }\n                )\n\n                const vesselDraughtChart = new dc.BarChart('#draught-chart')\n                .width(chartWidth)\n                .height(chartHeight)\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\n                .x(d3.scaleLinear()\n                    .domain([0, vesselDraughtRange]))\n                .xUnits(() => chartNbBars)\n                .brushOn(false)\n                .colors(typeColorScale)\n                .xAxisLabel(\"Tirant d'eau (m)\")\n                .elasticY(true)\n                .dimension(vesselDraught)\n                .group(vesselDraughts, firstClass, d => d.value[firstClass])\n\n                for (let i = 1; i < classes.length; i++) {\n                    const type = classes[i]\n                    vesselDraughtChart.stack(vesselDraughts, type, d => d.value[type])\n                }\n                \n                vesselDraughtChart.yAxis().ticks(6)\n\n                vesselDraughtChart.render()\n\n                // Types\n\n                const vesselTypeY = ndx.dimension(_ => 0)\n                const vesselTypesY = vesselTypeY.group().reduce(\n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1;\n                      return p;}, \n                    function(p, v) {\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1;\n                      return p;}, \n                    function() {\n                      return {};\n                    }\n                )\n\n                const vesselTypeChart = new dc.BarChart(\"#type-chart\")\n                .x(d3.scaleOrdinal().domain([0, 0]))\n                .width(200)\n                .height(750)\n                .margins({top: 10, right: 50, bottom: 180, left: 0})\n                .dimension(vesselTypeY)\n                .group(vesselTypesY, firstClass, d => d.value[firstClass])\n                .xUnits(() => 1)\n                .colors(typeColorScale)\n                .brushOn(false)\n                .elasticY(true)\n                .legend(dc.legend().y(600))\n                \n\n                for (let i = 1; i < classes.length; i++) {\n                    const type = classes[i]\n                    vesselTypeChart.stack(vesselTypesY, type, d => d.value[type])\n                }\n\n                vesselTypeChart.filter = function() {};\n\n                vesselTypeChart.render()\n\n                // Trafic\n\n                const vesselTraffic = ndx.dimension(d => d.departureDate)\n                const vesselTraffics = vesselTraffic.group(d3.timeMonth)\n                \n                const minDate = vesselTraffic.bottom(1)[0].departureDate\n                const maxDate = vesselTraffic.top(1)[0].departureDate\n\n                // const vesselTrafficRange = maxDate - minDate\n                // const vesselTrafficBarWidth = vesselTrafficRange / chartNbBars\n\n                const vesselTrafficChart = new dc.BarChart('#tab-2-content .traffic-chart')\n                .width(timeSelectWidth)\n                .height(125)\n                .margins({top: 10, right: 50, bottom: 30, left: 30})\n                .dimension(vesselTraffic)\n                .group(vesselTraffics)\n                .round(d3.timeMonth)\n                .x(d3.scaleTime()\n                    .domain([minDate, maxDate])\n                    .rangeRound([0, timeSelectWidth]))\n                .brushOn(true)\n                .elasticY(true)\n\n                vesselTrafficChart.yAxis().ticks(5)\n\n                vesselTrafficChart.render()\n\n                const portDim = ndx.dimension(d => d.departurePort)\n\n                ndx.dimension(d=> d.departurePort)\n                    .filter(d => !d.includes('Virtual harbour'))\n\n                const portTraffic = portDim.group().reduceCount()\n                const filteredGroup = remove_empty_bins(portTraffic)\n\n                const portChart = new dc.RowChart('#port-chart')\n                .width(600)\n                .height(900)\n                .margins({top: 30, right: 50, bottom: 30, left: 30})\n                .dimension(portDim)\n                .group(filteredGroup)\n                .x(d3.scaleLinear()\n                    .domain([0, portTraffic.top(1)[0].value])\n                    .rangeRound([0, 500]))\n                .xAxis(d3.axisTop())\n                .colors(d3.scaleOrdinal(['#1f77b4']))\n                .othersGrouper(false)\n                .elasticX(true)\n                .label(d => d.key + ': ' + d.value)\n                .fixedBarHeight(ROW_CHART_HEIGHT)\n\n                portChart.on('pretransition', function() {\n                    portChart.select('g.axis').attr('transform', 'translate(0,0)')\n                    portChart.selectAll('line.grid-line').attr('y2', portChart.effectiveHeight())\n                    const count = filteredGroup.all().length\n                    const height = count * ROW_CHART_HEIGHT_MARGIN + 20\n                    portChart.select('svg').attr('height', height)\n                })\n\n                portChart.render()\n\n                d3.select(\"#loader\")\n                    .style(\"display\", \"none\")\n                d3.select(\"#loader-container\")\n                    .style(\"display\", \"none\")\n            })\n        })\n    })\n})\n\nclass SingularStackedBarChart {\n    constructor(parent, group) {\n        this._groupAll = null;\n        this._colors = null;\n        this._width = this._height = 200;\n        this._duration = 500;\n        this._root = d3.select(parent);\n        dc.registerChart(this, group);\n        this._rect = null;\n    }\n\n    groupAll(groupAll) {\n        if(!arguments.length)\n            return this._groupAll;\n        this._groupAll = groupAll;\n        return this;\n    }\n\n    colors(colors) {\n        if(!arguments.length)\n            return this._colors;\n        this._colors = colors;\n        return this;\n    }\n\n    render() {\n        const width = 200, height = 200;\n        let svg = this._root.selectAll('svg')\n            .data([0])\n            .join('svg')\n            .attr('width', width)\n            .attr('height', width);\n        this._rect = svg.selectAll('rect.swatch')\n            .data([0])\n            .join('rect')\n            .attr('class', 'swatch')\n            .attr('width', width)\n            .attr('height', width);\n        this.redraw();\n    }\n\n    redraw() {\n        this._rect.transition()\n            .duration(this._duration)\n            .attr('fill', this._colors(this._groupAll.value()));\n    }\n}\n\n// https://github.com/dc-js/dc.js/wiki/FAQ#how-do-i-filter-the-data-before-its-charted\nfunction remove_empty_bins(source_group) {\n    return {\n        all:function () {\n            return source_group.all().filter(function(d) {\n                return d.value !== 0;\n            });\n        }\n    };\n}"]}