{"version":3,"sources":["scripts/onglet2.js"],"names":["ROW_CHART_HEIGHT","ROW_CHART_HEIGHT_MARGIN","d3","csv","then","data1","data2","data3","dataTypes","data","concat","dataVesselTypesArray","map","d","vesselClass","Class","vesselType","Type","dataVesselTypes","Map","entry","set","i","get","index","departureDate","timeParse","departurePort","arrivalDate","arrivalPort","vesselLength","vesselWidth","vesselCapacity","vesselDraught","chartWidth","chartHeight","chartNbBars","timeSelectWidth","ndx","crossfilter","vesselClassX","dimension","classes","group","all","key","typeColorScale","scaleOrdinal","schemeSet2","domain","firstClass","vesselLengthRange","vesselLengthBarWidth","vesselLengths","Math","floor","reduce","p","v","vesselLengthChart","dc","BarChart","width","height","margins","top","right","bottom","left","x","scaleLinear","xUnits","brushOn","colors","xAxisLabel","elasticY","value","title","layer","type","stack","length","yAxis","ticks","render","vesselWidthRange","vesselWidthBarWidth","vesselWidths","vesselWidthChart","vesselCapacityRange","vesselCapacityBarWidth","vesselCapacities","vesselCapacityChart","vesselDraughtRange","vesselDraughtBarWidth","vesselDraughts","vesselDraughtChart","nullDimension","_","vesselClassesY","vesselTypeChart","ReverseBarChart","legend","y","filter","vesselTraffic","vesselTraffics","timeMonth","minDate","maxDate","vesselTrafficChart","round","scaleTime","rangeRound","portDim","includes","portTraffic","reduceCount","filteredGroup","remove_empty_bins","portChart","RowChart","xAxis","axisTop","othersGrouper","elasticX","label","fixedBarHeight","on","select","attr","selectAll","effectiveHeight","count","style","items","reverse","source_group"],"mappings":"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","file":"onglet2.2ee76a08.js","sourceRoot":"..","sourcesContent":["const ROW_CHART_HEIGHT = 16.68\r\nconst ROW_CHART_HEIGHT_MARGIN = 21.75\r\n\r\n// Lecture des données\r\nd3.csv(\"./TRIP_PART_1.csv\").then( function(data1) {\r\n    d3.csv(\"./TRIP_PART_2.csv\").then( function(data2) {\r\n        d3.csv(\"./TRIP_PART_3.csv\").then( function(data3) {\r\n            d3.csv(\"./Vessel Type Class.csv\").then(function(dataTypes) {\r\n                // Concaténation des données de trajet\r\n                let data = data1.concat(data2).concat(data3)\r\n\r\n                // Tableau des paires classes (regroupement de types) de navire et types de navire\r\n                const dataVesselTypesArray = dataTypes.map((d) => {\r\n                    return {\r\n                        vesselClass: d.Class,\r\n                        vesselType: d.Type\r\n                    }\r\n                })\r\n\r\n                // Map des classes de navire selon le type de navire\r\n                let dataVesselTypes = new Map()\r\n                for (const entry of dataVesselTypesArray) {\r\n                    const vesselClass = entry.vesselClass\r\n                    const vesselType = entry.vesselType\r\n                    dataVesselTypes.set(vesselType, vesselClass)\r\n                }\r\n                \r\n                // On réorganise et transforme les données de trajet en types de données utilisables\r\n                data = data.map((d, i) => {\r\n                    const vesselType = d['Vessel Type']\r\n                    let vesselClass = dataVesselTypes.get(d['Vessel Type'])\r\n                    if (vesselType == '<Unknown Type>') {\r\n                        vesselClass = 'Other'\r\n                    }\r\n                    return {\r\n                        index: i,\r\n                        departureDate: d3.timeParse('%Y-%m-%d')(d['Departure Date']),\r\n                        departurePort: d['Departure Hardour'],\r\n                        arrivalDate: d3.timeParse('%Y-%m-%d')(d['Arrival Date']),\r\n                        arrivalPort: d['Arrival Hardour'],\r\n                        vesselClass: vesselClass,\r\n                        vesselType: d['Vessel Type'],\r\n                        vesselLength: +d['Lenght'],\r\n                        vesselWidth: +d['Width'],\r\n                        vesselCapacity: +d['DeadWeight Tonnage'],\r\n                        vesselDraught: +d['Maximum Draugth']\r\n                    }\r\n                })\r\n\r\n                const chartWidth = 776\r\n                const chartHeight = 180\r\n                const chartNbBars = 50\r\n\r\n                const timeSelectWidth = 950\r\n\r\n                // Regroupment des données via la librairie crossfilter\r\n                // Les changements de tout graphique l'utilisant sera répercuté dans les autres graphiques\r\n                const ndx = crossfilter(data)\r\n\r\n                const vesselClassX = ndx.dimension(d => d.vesselClass)\r\n                // Liste des classes de navire\r\n                const classes = vesselClassX.group().all().map(d => d.key)\r\n\r\n                // Schema de couleurs utilisé pour les classes de navire\r\n                const typeColorScale = d3.scaleOrdinal(d3.schemeSet2).domain(classes)\r\n                const firstClass = classes[0]\r\n\r\n\r\n                // Graphique des longueurs des navires\r\n\r\n                const vesselLengthRange = 400\r\n                const vesselLengthBarWidth = vesselLengthRange / chartNbBars\r\n                const vesselLength = ndx.dimension(d => d.vesselLength)\r\n                const vesselLengths = vesselLength.group(d => Math.floor(d / vesselLengthBarWidth) * vesselLengthBarWidth).reduce(\r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1\r\n                      return p}, \r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1\r\n                      return p}, \r\n                    function() {\r\n                      return {}\r\n                    }\r\n                )\r\n\r\n                const vesselLengthChart = new dc.BarChart('#length-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselLengthRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .colors(typeColorScale)\r\n                .xAxisLabel('Longueur (m)')\r\n                .elasticY(true)\r\n                .dimension(vesselLength)\r\n                .group(vesselLengths, firstClass, d => d.value[firstClass])\r\n                .title(function (d) {\r\n                    return d.key + '[' + this.layer + ']: ' + d.value[this.layer]\r\n                })\r\n\r\n                for (let i = 1; i < classes.length; i++) {\r\n                    const type = classes[i]\r\n                    vesselLengthChart.stack(vesselLengths, type, d => d.value[type])\r\n                }\r\n                \r\n                vesselLengthChart.yAxis().ticks(8)\r\n\r\n                vesselLengthChart.render()\r\n\r\n\r\n                // Graphique des largeurs des navires\r\n\r\n                const vesselWidthRange = 180\r\n                const vesselWidthBarWidth = vesselWidthRange / chartNbBars\r\n                const vesselWidth = ndx.dimension(d => d.vesselWidth)\r\n                const vesselWidths = vesselWidth.group(d => Math.floor(d / vesselWidthBarWidth) * vesselWidthBarWidth).reduce(\r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1\r\n                      return p}, \r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1\r\n                      return p}, \r\n                    function() {\r\n                      return {}\r\n                    }\r\n                )\r\n\r\n                const vesselWidthChart = new dc.BarChart('#width-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselWidthRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .colors(typeColorScale)\r\n                .xAxisLabel('Largeur (m)')\r\n                .elasticY(true)\r\n                .dimension(vesselWidth)\r\n                .group(vesselWidths, firstClass, d => d.value[firstClass])\r\n                .title(function (d) {\r\n                    return d.key + '[' + this.layer + ']: ' + d.value[this.layer]\r\n                })\r\n\r\n                for (let i = 1; i < classes.length; i++) {\r\n                    const type = classes[i]\r\n                    vesselWidthChart.stack(vesselWidths, type, d => d.value[type])\r\n                }\r\n\r\n                vesselWidthChart.yAxis().ticks(7)\r\n\r\n                vesselWidthChart.render()\r\n\r\n\r\n                // Graphique des capacités des navires\r\n\r\n                const vesselCapacityRange = 650000\r\n                const vesselCapacityBarWidth = vesselCapacityRange / chartNbBars\r\n                const vesselCapacity = ndx.dimension(d => d.vesselCapacity)\r\n                const vesselCapacities = vesselCapacity.group(d => Math.floor(d / vesselCapacityBarWidth) * vesselCapacityBarWidth).reduce(\r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1\r\n                      return p}, \r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1\r\n                      return p}, \r\n                    function() {\r\n                      return {}\r\n                    }\r\n                )\r\n\r\n                const vesselCapacityChart = new dc.BarChart('#capacity-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselCapacityRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .colors(typeColorScale)\r\n                .xAxisLabel('Capacité (t)')\r\n                .elasticY(true)\r\n                .dimension(vesselCapacity)\r\n                .group(vesselCapacities, firstClass, d => d.value[firstClass])\r\n                .title(function (d) {\r\n                    return d.key + '[' + this.layer + ']: ' + d.value[this.layer]\r\n                })\r\n\r\n                for (let i = 1; i < classes.length; i++) {\r\n                    const type = classes[i]\r\n                    vesselCapacityChart.stack(vesselCapacities, type, d => d.value[type])\r\n                }\r\n                \r\n                vesselCapacityChart.yAxis().ticks(9)\r\n\r\n                vesselCapacityChart.render()\r\n\r\n                \r\n                // Graphique des tirants d'eau des navires\r\n\r\n                const vesselDraughtRange = 30\r\n                const vesselDraughtBarWidth = vesselDraughtRange / chartNbBars\r\n                const vesselDraught = ndx.dimension(d => d.vesselDraught)\r\n                const vesselDraughts = vesselDraught.group(d => Math.floor(d / vesselDraughtBarWidth) * vesselDraughtBarWidth).reduce(\r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1\r\n                      return p}, \r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1\r\n                      return p}, \r\n                    function() {\r\n                      return {}\r\n                    }\r\n                )\r\n\r\n                const vesselDraughtChart = new dc.BarChart('#draught-chart')\r\n                .width(chartWidth)\r\n                .height(chartHeight)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 50})\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, vesselDraughtRange]))\r\n                .xUnits(() => chartNbBars)\r\n                .brushOn(false)\r\n                .colors(typeColorScale)\r\n                .xAxisLabel(\"Tirant d'eau (m)\")\r\n                .elasticY(true)\r\n                .dimension(vesselDraught)\r\n                .group(vesselDraughts, firstClass, d => d.value[firstClass])\r\n                .title(function (d) {\r\n                    return d.key + '[' + this.layer + ']: ' + d.value[this.layer]\r\n                })\r\n\r\n                for (let i = 1; i < classes.length; i++) {\r\n                    const type = classes[i]\r\n                    vesselDraughtChart.stack(vesselDraughts, type, d => d.value[type])\r\n                }\r\n                \r\n                vesselDraughtChart.yAxis().ticks(6)\r\n\r\n                vesselDraughtChart.render()\r\n\r\n\r\n                // Graphique des types des navires\r\n\r\n                const nullDimension = ndx.dimension(_ => 0)\r\n                const vesselClassesY = nullDimension.group().reduce(\r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) + 1\r\n                      return p}, \r\n                    function(p, v) {\r\n                      p[v.vesselClass] = (p[v.vesselClass] || 0) - 1\r\n                      return p}, \r\n                    function() {\r\n                      return {}\r\n                    }\r\n                )\r\n\r\n                const vesselTypeChart = new ReverseBarChart(\"#type-chart\")\r\n                .x(d3.scaleOrdinal().domain([0, 0]))\r\n                .width(200)\r\n                .height(750)\r\n                .margins({top: 10, right: 50, bottom: 180, left: 0})\r\n                .dimension(nullDimension)\r\n                .group(vesselClassesY, firstClass, d => d.value[firstClass])\r\n                .xUnits(() => 1)\r\n                .colors(typeColorScale)\r\n                .brushOn(false)\r\n                .elasticY(true)\r\n                .legend(dc.legend().y(600))\r\n                .title(function (d) {\r\n                    return this.layer + ': ' + d.value[this.layer]\r\n                })\r\n                \r\n\r\n                for (let i = 1; i < classes.length; i++) {\r\n                    const vesselClass = classes[i]\r\n                    vesselTypeChart.stack(vesselClassesY, vesselClass, d => d.value[vesselClass])\r\n                }\r\n\r\n                vesselTypeChart.filter = function() {}\r\n\r\n                vesselTypeChart.render()\r\n\r\n\r\n                // Graphique du trafic total\r\n\r\n                const vesselTraffic = ndx.dimension(d => d.departureDate)\r\n                const vesselTraffics = vesselTraffic.group(d3.timeMonth)\r\n                \r\n                const minDate = vesselTraffic.bottom(1)[0].departureDate\r\n                const maxDate = vesselTraffic.top(1)[0].departureDate\r\n\r\n                const vesselTrafficChart = new dc.BarChart('#tab-2-content .traffic-chart')\r\n                .width(timeSelectWidth)\r\n                .height(125)\r\n                .margins({top: 10, right: 50, bottom: 30, left: 30})\r\n                .dimension(vesselTraffic)\r\n                .group(vesselTraffics)\r\n                .round(d3.timeMonth)\r\n                .x(d3.scaleTime()\r\n                    .domain([minDate, maxDate])\r\n                    .rangeRound([0, timeSelectWidth]))\r\n                .brushOn(true)\r\n                .elasticY(true)\r\n\r\n                vesselTrafficChart.yAxis().ticks(5)\r\n\r\n                vesselTrafficChart.render()\r\n\r\n                \r\n                // Graphique de liste des ports\r\n\r\n                const portDim = ndx.dimension(d => d.departurePort)\r\n\r\n                ndx.dimension(d=> d.departurePort)\r\n                    .filter(d => !d.includes('Virtual harbour'))\r\n\r\n                const portTraffic = portDim.group().reduceCount()\r\n                const filteredGroup = remove_empty_bins(portTraffic)\r\n\r\n                const portChart = new dc.RowChart('#port-chart')\r\n                .width(600)\r\n                .height(900)\r\n                .margins({top: 30, right: 50, bottom: 30, left: 30})\r\n                .dimension(portDim)\r\n                .group(filteredGroup)\r\n                .x(d3.scaleLinear()\r\n                    .domain([0, portTraffic.top(1)[0].value])\r\n                    .rangeRound([0, 500]))\r\n                .xAxis(d3.axisTop())\r\n                .colors(d3.scaleOrdinal(['#1f77b4']))\r\n                .othersGrouper(false)\r\n                .elasticX(true)\r\n                .label(d => d.key + ': ' + d.value)\r\n                .fixedBarHeight(ROW_CHART_HEIGHT)\r\n\r\n                // Change la grandeur du graphique selon le nombre de ports présents dans la sélection temporelle\r\n                portChart.on('pretransition', function() {\r\n                    portChart.select('g.axis').attr('transform', 'translate(0,0)')\r\n                    portChart.selectAll('line.grid-line').attr('y2', portChart.effectiveHeight())\r\n                    const count = filteredGroup.all().length\r\n                    const height = count * ROW_CHART_HEIGHT_MARGIN + 20\r\n                    portChart.select('svg').attr('height', height)\r\n                })\r\n\r\n                portChart.render()\r\n\r\n                // Fin du chargement, on enlève l'icône de chargement\r\n                d3.select(\"#loader\")\r\n                    .style(\"display\", \"none\")\r\n                d3.select(\"#loader-container\")\r\n                    .style(\"display\", \"none\")\r\n            })\r\n        })\r\n    })\r\n})\r\n\r\n// Permet d'inverser l'ordre de la légende pour que l'ordre soit identique aux couleurs sur le graphique\r\nclass ReverseBarChart extends dc.BarChart {\r\n    legendables () {\r\n        const items = super.legendables()\r\n        return items.reverse()\r\n    }\r\n}\r\n\r\n// Source : https://github.com/dc-js/dc.js/wiki/FAQ#how-do-i-filter-the-data-before-its-charted\r\nfunction remove_empty_bins(source_group) {\r\n    return {\r\n        all:function () {\r\n            return source_group.all().filter(function(d) {\r\n                return d.value !== 0\r\n            })\r\n        }\r\n    }\r\n}"]}